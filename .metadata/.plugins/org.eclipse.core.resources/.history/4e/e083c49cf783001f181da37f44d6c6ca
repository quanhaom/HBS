package frame;

import java.awt.GridLayout;
import java.sql.*;
import javax.swing.*;
import model.Person;

public class EditPro extends JFrame {
    private JTextField usernameField, passwordField, nameField, dobField, phoneField, idCardField, pointField;
    private JLabel roleLabel;
    private JButton applyButton, cancelButton;
    private CustomerFrame customerFrame;
    private Person person; // Store the Person object

    public EditPro(CustomerFrame customerFrame, Person person) {
        this.customerFrame = customerFrame;
        this.person = person; // Store the person for easy access

        setTitle("Edit Profile");
        setLayout(new GridLayout(10, 2));
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        // Labels and fields for user information
        add(new JLabel("ID:"));
        add(new JLabel(String.valueOf(person.getId()))); // Display ID directly

        add(new JLabel("Username:"));
        usernameField = new JTextField(person.getUsername());
        add(usernameField);
        
        add(new JLabel("Password:"));
        passwordField = new JTextField(person.getPassword());
        add(passwordField);
        
        add(new JLabel("Name:"));
        nameField = new JTextField(person.getName());
        add(nameField);
        
        add(new JLabel("Role:"));
        roleLabel = new JLabel("Customer"); // Fixed as "customer"
        add(roleLabel);
        
        add(new JLabel("DOB (YYYY-MM-DD):"));
        dobField = new JTextField(person.getDob());
        add(dobField);
        
        add(new JLabel("Phone:"));
        phoneField = new JTextField(person.getPhone());
        add(phoneField);
        
        add(new JLabel("ID Card:"));
        idCardField = new JTextField(person.getIdCard());
        add(idCardField);
        
        add(new JLabel("Points:"));
        pointField = new JTextField(String.valueOf(person.getPoint()));
        add(pointField);
        
        // Buttons to apply changes or cancel
        applyButton = new JButton("Apply");
        applyButton.addActionListener(e -> applyChanges());
        add(applyButton);
        
        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> cancel());
        add(cancelButton);
        
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
    }

    private void applyChanges() {
        String username = usernameField.getText();
        String password = passwordField.getText();
        String name = nameField.getText();
        String dob = dobField.getText();
        String phone = phoneField.getText();
        String idCard = idCardField.getText();
        String point = pointField.getText();

        // Validate fields
        if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() || point.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the database with the new information
        try (Connection connection = getConnection();
             PreparedStatement statement = connection.prepareStatement("UPDATE users SET username=?, password=?, name=?, dob=?, phone=?, id_card=?, point=? WHERE id=?")) {
            statement.setString(1, username);
            statement.setString(2, password);
            statement.setString(3, name);
            statement.setString(4, dob);
            statement.setString(5, phone);
            statement.setString(6, idCard);
            statement.setString(7, point);
            statement.setString(8, String.valueOf(person.getId())); // Use person's ID for the update
            int rowsUpdated = statement.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Profile updated successfully.");
                dispose();
                customerFrame.setVisible(true); // Return to the customer frame
            } else {
                JOptionPane.showMessageDialog(this, "Error updating profile. No rows affected.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating profile.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void cancel() {
        dispose();
        customerFrame.setVisible(true);
    }
}
