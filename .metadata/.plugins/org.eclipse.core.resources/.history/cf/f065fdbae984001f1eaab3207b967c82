package model;

import javax.swing.JOptionPane;
import model.Book;
import model.Product;
import model.Stationery;
import model.Toy;

public class Employee {

    private Store store;

    public Employee(Store store) {
        this.store = store;
    }

    public void addProduct() {
        // Logic for adding product
        String[] types = {"Book", "Toy", "Stationery"};
        String type = (String) JOptionPane.showInputDialog(null, "Select Product Type:", "Product Selection",
                JOptionPane.QUESTION_MESSAGE, null, types, types[0]);

        String name = JOptionPane.showInputDialog(null, "Enter Product Name:");
        String priceStr = JOptionPane.showInputDialog(null, "Enter Product Price:");
        String quantityStr = JOptionPane.showInputDialog(null, "Enter Quantity:");

        if (name != null && priceStr != null && quantityStr != null && type != null) {
            try {
                double price = Double.parseDouble(priceStr);
                int quantity = Integer.parseInt(quantityStr);
                Product product = null;

                int id = store.getNextProductId();

                switch (type) {
                    case "Book":
                        String author = JOptionPane.showInputDialog(null, "Enter Author:");
                        String publisher = JOptionPane.showInputDialog(null, "Enter Publisher:");
                        String isbn = JOptionPane.showInputDialog(null, "Enter ISBN:");
                        int publicationYear = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter Publication Year:"));
                        product = new Book(String.valueOf(id), name, price, quantity, author, isbn, publicationYear, publisher);
                        break;
                    case "Toy":
                        String brand = JOptionPane.showInputDialog(null, "Enter Brand:");
                        String material = JOptionPane.showInputDialog(null, "Enter Material:");
                        int suitage = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter Suitable Age:"));
                        product = new Toy(String.valueOf(id), name, price, quantity, brand, suitage, material);
                        break;
                    case "Stationery":
                        String brandsta = JOptionPane.showInputDialog(null, "Enter Brand:");
                        String materialsta = JOptionPane.showInputDialog(null, "Enter Material:");
                        product = new Stationery(String.valueOf(id), name, price, quantity, brandsta, materialsta);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Invalid product type.");
                        return;
                }

                store.addProduct(product);
                JOptionPane.showMessageDialog(null, "Product added successfully.");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input for price or quantity.");
            }
        }
    }
    public void removeProduct(String productId) {
        String sql = "DELETE FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId); 
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public void updateWorkingHours(String userId, long duration) {
        String query = "UPDATE users SET working_hours = working_hours + ? WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setLong(1, duration);
            pstmt.setString(2, userId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace(); 
        }
    }
    public void updateProduct(Product product) {
        String sql = "UPDATE products SET name = ?, price = ?, quantity = ?, author = ?, isbn = ?, publisher = ?, brand = ?, material = ? WHERE id = ?"; // SQL query to update product details

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, product.getName()); 
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getQuantity()); 

            if (product instanceof Book) {
                Book book = (Book) product;
                stmt.setString(4, book.getAuthor());
                stmt.setString(5, book.getIsbn()); 
                stmt.setString(6, book.getPublisher()); 
                stmt.setNull(7, Types.VARCHAR); 
                stmt.setNull(8, Types.VARCHAR); 
            } else if (product instanceof Toy) {
                Toy toy = (Toy) product;
                stmt.setNull(4, Types.VARCHAR); 
                stmt.setNull(5, Types.VARCHAR); 
                stmt.setNull(6, Types.VARCHAR); 
                stmt.setString(7, toy.getBrand()); 
                stmt.setString(8, toy.getMaterial());
            } else if (product instanceof Stationery) {
                Stationery stationery = (Stationery) product;
                stmt.setNull(4, Types.VARCHAR); 
                stmt.setNull(5, Types.VARCHAR); 
                stmt.setNull(6, Types.VARCHAR);
                stmt.setString(7, stationery.getBrand());
                stmt.setString(8, stationery.getMaterial()); 
            } else {
                stmt.setNull(4, Types.VARCHAR);
                stmt.setNull(5, Types.VARCHAR); 
                stmt.setNull(6, Types.VARCHAR); 
                stmt.setNull(7, Types.VARCHAR);
                stmt.setNull(8, Types.VARCHAR); 
            }

            stmt.setString(9, product.getId());

        } catch (SQLException e) {
            e.printStackTrace(); 
        }
    }
    @Override
    public String toString() {
        return "Employee [ID=" + getId() + ", Name=" + getName() + ", Role=" + getRole() + 
               ", DOB=" + dob + ", Phone=" + phone + 
               ", ID Card=" + idCard + ", Working Hours=" + workingHours + "]";
    }
}
