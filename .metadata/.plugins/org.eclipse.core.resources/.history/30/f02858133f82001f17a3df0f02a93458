package frame;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.text.SimpleDateFormat;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private JButton addButton, editButton, removeButton, backButton;
    private JComboBox<String> salaryOptions;
    private ManagerFrame managerFrame;

    public EmpmanaFrame(ManagerFrame managerFrame) {
        this.managerFrame = managerFrame;

        setTitle("User Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        String[] columnNames = {"ID", "Username", "Password", "Name", "Role", "DOB", "Phone", "ID Card", "Working Hours", "Salary", "Point"};
        tableModel = new DefaultTableModel(columnNames, 0);
        employeeTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        addButton = new JButton("Add User");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addUser());

        editButton = new JButton("Edit User");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editUser());

        removeButton = new JButton("Remove User");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeUser());

        backButton = new JButton("Back");
        actionPanel.add(backButton);
        backButton.addActionListener(e -> back());

        salaryOptions = new JComboBox<>(new String[]{"Show Salary1", "Show Salary2", "Show Salary3"});
        salaryOptions.addActionListener(e -> updateSalaryDisplay());
        actionPanel.add(salaryOptions);

        loadUsersFromDatabase();

        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void loadUsersFromDatabase() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             Statement statement = connection.createStatement()) {
            String query = "SELECT * FROM users";
            ResultSet resultSet = statement.executeQuery(query);
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String name = resultSet.getString("name");
                String role = resultSet.getString("role");
                String dob = resultSet.getString("dob");
                String phone = resultSet.getString("phone");
                String idCard = resultSet.getString("id_card");
                String workingHours = resultSet.getString("working_hours");
                String salary1 = resultSet.getString("salary1");
                String point = resultSet.getString("point");

                tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary1, point});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading data from database.");
        }
    }

    private void updateSalaryDisplay() {
        int selectedOption = salaryOptions.getSelectedIndex();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String id = (String) tableModel.getValueAt(i, 0);
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
                 Statement statement = connection.createStatement()) {
                String query = "SELECT salary1, salary2, salary3 FROM users WHERE id = " + id;
                ResultSet resultSet = statement.executeQuery(query);
                if (resultSet.next()) {
                    String salary = switch (selectedOption) {
                        case 0 -> resultSet.getString("salary1");
                        case 1 -> resultSet.getString("salary2");
                        case 2 -> resultSet.getString("salary3");
                        default -> "";
                    };
                    tableModel.setValueAt(salary, i, 9); // Cập nhật cột lương
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void addUser() {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1);
                }
            }

            // Collect user inputs
            String username = JOptionPane.showInputDialog(this, "Enter Username:");
            String password = JOptionPane.showInputDialog(this, "Enter Password:");
            String name = JOptionPane.showInputDialog(this, "Enter Name:");
            
            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);
            
            String dob;
            boolean isValidDate;
            do {
                dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
                isValidDate = dob.matches("\\d{4}-\\d{2}-\\d{2}");
                if (!isValidDate) {
                    JOptionPane.showMessageDialog(this, "Date of Birth must be in the format YYYY-MM-DD!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!isValidDate);
            
            String phone;
            boolean validPhone;
            do {
                phone = JOptionPane.showInputDialog(this, "Enter Phone:");
                validPhone = phone.length() <= 11; // Check if phone number is 11 digits or less
                if (!validPhone) {
                    JOptionPane.showMessageDialog(this, "Phone number must be less than or equal to 11 digits!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!validPhone);
            
            String idCard = JOptionPane.showInputDialog(this, "Enter ID Card:");
            String workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:");
            String salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:");
            String salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:");
            String salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:");
            String point = JOptionPane.showInputDialog(this, "Enter Point:");

            // Loop for validation
            boolean valid = false;
            while (!valid) {
                valid = true;

                if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() || workingHours.isEmpty() || salary1.isEmpty() || point.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                    password = JOptionPane.showInputDialog(this, "Enter Password:", password);
                    name = JOptionPane.showInputDialog(this, "Enter Name:", name);
                    role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, role);
                    dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    phone = JOptionPane.showInputDialog(this, "Enter Phone:", phone);
                    idCard = JOptionPane.showInputDialog(this, "Enter ID Card:", idCard);
                    workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:", workingHours);
                    salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:", salary1);
                    salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:", salary2);
                    salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:", salary3);
                    point = JOptionPane.showInputDialog(this, "Enter Point:", point);
                    valid = false; // Set valid to false to repeat the loop
                }

                // Check for duplicate username
                String sqlCheck = "SELECT COUNT(*) FROM users WHERE username = ?";
                try (PreparedStatement checkStatement = connection.prepareStatement(sqlCheck)) {
                    checkStatement.setString(1, username);
                    ResultSet resultSet = checkStatement.executeQuery();
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        if (count > 0) {
                            JOptionPane.showMessageDialog(this, "Username already exists. Please choose another one!", "Error", JOptionPane.ERROR_MESSAGE);
                            username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                            valid = false; // Set valid to false to repeat the loop
                        }
                    }
                }
            }

            // Insert new user into database
            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            boolean insertSuccessful = false;
            while (!insertSuccessful) {
                try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                    insertStatement.setString(1, id);
                    insertStatement.setString(2, username);
                    insertStatement.setString(3, password);
                    insertStatement.setString(4, name);
                    insertStatement.setString(5, role);
                    insertStatement.setString(6, dob);
                    insertStatement.setString(7, phone);
                    insertStatement.setString(8, idCard);
                    insertStatement.setString(9, workingHours);
                    insertStatement.setString(10, salary1);
                    insertStatement.setString(11, salary2);
                    insertStatement.setString(12, salary3);
                    insertStatement.setString(13, point);
                    insertStatement.executeUpdate();
                    insertSuccessful = true; // Exit loop if insertion was successful
                } catch (SQLException e) {
                    if (e.getMessage().contains("Data truncation: Incorrect date value")) {
                        JOptionPane.showMessageDialog(this, "Invalid date of birth! Please enter a valid date (YYYY-MM-DD):", "Error", JOptionPane.ERROR_MESSAGE);
                        dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    } else {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
                        break; // Exit loop on other SQL errors
                    }
                }
            }

            // Add user to the table model
            tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary1, point});
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    private void editUser() {
        int selectedRow = empTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một người dùng để chỉnh sửa.");
            return;
        }

        String id = empTable.getValueAt(selectedRow, 0).toString(); // Giả sử cột 0 là ID
        String username = empTable.getValueAt(selectedRow, 1).toString(); // Giả sử cột 1 là username
        String password = empTable.getValueAt(selectedRow, 2).toString(); // Giả sử cột 2 là password
        String name = empTable.getValueAt(selectedRow, 3).toString(); // Giả sử cột 3 là name
        String dob = empTable.getValueAt(selectedRow, 4).toString(); // Giả sử cột 4 là dob
        String phone = empTable.getValueAt(selectedRow, 5).toString(); // Giả sử cột 5 là phone
        String idCard = empTable.getValueAt(selectedRow, 6).toString(); // Giả sử cột 6 là id_card
        String workingHours = empTable.getValueAt(selectedRow, 7).toString(); // Giả sử cột 7 là working_hours
        String salary1 = empTable.getValueAt(selectedRow, 8).toString(); // Giả sử cột 8 là salary1

        // Kiểm tra ràng buộc dữ liệu
        if (username.isEmpty() || password.isEmpty() || name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tên đăng nhập, mật khẩu và tên không được để trống.");
            return;
        }

        if (!isUsernameAvailable(username, id)) {
            JOptionPane.showMessageDialog(this, "Tên đăng nhập đã tồn tại. Vui lòng chọn tên khác.");
            return;
        }

        if (!isValidDate(dob)) {
            JOptionPane.showMessageDialog(this, "Ngày sinh không hợp lệ. Vui lòng nhập lại.");
            return;
        }

        if (!isValidPhoneNumber(phone)) {
            JOptionPane.showMessageDialog(this, "Số điện thoại không hợp lệ. Vui lòng nhập lại.");
            return;
        }

        // Cập nhật dữ liệu vào cơ sở dữ liệu
        try {
            Connection connection = // Kết nối đến cơ sở dữ liệu của bạn;
            String sql = "UPDATE employees SET username = ?, password = ?, name = ?, dob = ?, phone = ?, id_card = ?, working_hours = ?, salary1 = ? WHERE id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);
            preparedStatement.setString(3, name);
            preparedStatement.setString(4, dob);
            preparedStatement.setString(5, phone);
            preparedStatement.setString(6, idCard);
            preparedStatement.setString(7, workingHours);
            preparedStatement.setString(8, salary1);
            preparedStatement.setString(9, id);
            preparedStatement.executeUpdate();
            JOptionPane.showMessageDialog(this, "Cập nhật thành công.");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi trong quá trình cập nhật.");
        }
    }

    private boolean isUsernameAvailable(String username, String currentUserId) {
        // Kiểm tra xem tên người dùng có tồn tại trong cơ sở dữ liệu hay không
        try {
            Connection connection = // Kết nối đến cơ sở dữ liệu của bạn;
            String sql = "SELECT COUNT(*) FROM employees WHERE username = ? AND id != ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, currentUserId);
            ResultSet resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt(1) == 0; // Nếu đếm bằng 0, tên người dùng có sẵn
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false; // Giả sử không có kết quả
    }

    private boolean isValidDate(String dob) {
        // Kiểm tra định dạng ngày sinh
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            dateFormat.setLenient(false);
            dateFormat.parse(dob);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    private boolean isValidPhoneNumber(String phone) {
        // Kiểm tra số điện thoại có ít nhất 10 hoặc 11 chữ số
        return phone.matches("\\d{10,11}"); // Số điện thoại phải có 10 hoặc 11 chữ số
    }




    private void updateUserInDatabase(String id, String username, String password, String name, String role, String dob, String phone, String idCard, String workingHours, String salary1, String salary2, String salary3, String point) {
        String sqlUpdate = "UPDATE users SET username=?, password=?, name=?, role=?, dob=?, phone=?, id_card=?, working_hours=?, salary1=?, salary2=?, salary3=?, point=? WHERE id=?";
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement statement = connection.prepareStatement(sqlUpdate)) {
            statement.setString(1, username);
            statement.setString(2, password);
            statement.setString(3, name);
            statement.setString(4, role);
            statement.setString(5, dob);
            statement.setString(6, phone);
            statement.setString(7, idCard);
            statement.setString(8, workingHours);
            statement.setString(9, salary1);
            statement.setString(10, salary2);
            statement.setString(11, salary3);
            statement.setString(12, point);
            statement.setString(13, id);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private void removeUser() {
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow != -1) {
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this user?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String id = (String) tableModel.getValueAt(selectedRow, 0);
                removeUserFromDatabase(id);
                tableModel.removeRow(selectedRow);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to remove.");
        }
    }

    private void removeUserFromDatabase(String id) {
        String sqlDelete = "DELETE FROM users WHERE id=?";
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement statement = connection.prepareStatement(sqlDelete)) {
            statement.setString(1, id);
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void back() {
        setVisible(false);
        managerFrame.setVisible(true);
    }
}
