package frame;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import model.Product;
import services.Store;

public class EmployeeFrame extends JFrame {
    private Store store;
    private LoginFrame loginFrame;
    private JTextField searchField;
    private JButton searchButton;
    private JButton addButton;
    private JButton editButton;
    private JButton removeButton;
    private JButton viewAllButton; // Button to view all products

    public EmployeeFrame(Store store, LoginFrame loginFrame) {
        this.store = store;
        this.loginFrame = loginFrame;

        setTitle("Employee Frame");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JLabel searchLabel = new JLabel("Search Product:");
        searchField = new JTextField(15);
        searchButton = new JButton("Search");
        addButton = new JButton("Add Product");
        editButton = new JButton("Edit Product");
        removeButton = new JButton("Remove Product");
        viewAllButton = new JButton("View All Products"); // New button

        setLayout(new GridLayout(4, 2)); // Update layout to fit new button
        add(searchLabel);
        add(searchField);
        add(searchButton);
        add(addButton);
        add(editButton);
        add(removeButton);
        add(viewAllButton); // Add view all button

        // Set action listeners
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchProduct();
            }
        });

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addProduct();
            }
        });

        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editProduct();
            }
        });

        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeProduct();
            }
        });

        viewAllButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                viewAllProducts();
            }
        });
    }

    // Method to search for products
    private void searchProduct() {
        String query = searchField.getText();
        List<Product> products = store.searchProducts(query);
        if (products.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No products found.");
        } else {
            StringBuilder result = new StringBuilder("Found products:\n");
            for (Product product : products) {
                result.append(product.getId()).append(": ").append(product.getName()).append("\n");
            }
            JOptionPane.showMessageDialog(this, result.toString());
        }
    }

    // Method to add a product
    private void addProduct() {
        // Similar to your previous implementation
    }

    // Method to edit a product
    private void editProduct() {
        String id = JOptionPane.showInputDialog(this, "Enter Product ID to edit:");
        Product product = store.getProductById(id);

        if (product != null) {
            String newName = JOptionPane.showInputDialog(this, "Enter New Product Name:", product.getName());
            String newPriceStr = JOptionPane.showInputDialog(this, "Enter New Product Price:", product.getPrice());
            String newQuantityStr = JOptionPane.showInputDialog(this, "Enter New Quantity:", product.getQuantity());
            
            if (newName != null && newPriceStr != null && newQuantityStr != null) {
                try {
                    double newPrice = Double.parseDouble(newPriceStr);
                    int newQuantity = Integer.parseInt(newQuantityStr);
                    // Update the product attributes accordingly
                    product.setName(newName);
                    product.setPrice(newPrice);
                    product.setQuantity(newQuantity);
                    JOptionPane.showMessageDialog(this, "Product updated successfully!");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Invalid price or quantity format.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Product not found.");
        }
    }

    // Method to remove a product
    private void removeProduct() {
        String id = JOptionPane.showInputDialog(this, "Enter Product ID to remove:");
        boolean removed = store.removeProductById(id);
        if (removed) {
            JOptionPane.showMessageDialog(this, "Product removed successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Product not found.");
        }
    }

    // Method to view all products
    private void viewAllProducts() {
        List<Product> products = store.getAllProducts(); // You need to implement this method in Store
        if (products.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No products available.");
        } else {
            StringBuilder result = new StringBuilder("All Products:\n");
            for (Product product : products) {
                result.append(product.getId()).append(": ").append(product.getName()).append(" - ")
                      .append(product.getPrice()).append(" - Quantity: ").append(product.getQuantity()).append("\n");
            }
            JOptionPane.showMessageDialog(this, result.toString());
        }
    }
}
