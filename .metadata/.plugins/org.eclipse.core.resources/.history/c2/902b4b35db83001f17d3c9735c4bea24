package frame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import model.Person;
import services.Store;

public class EditPro extends JFrame {
    private JTextField usernameField;
    private JTextField nameField;
    private JPasswordField passwordField;
    private JTextField dobField;
    private JTextField phoneField;
    private JTextField idCardField;
    private JTextField pointField;
    private Person person; // The person to edit
    private Store store;

    public EditPro(Store store, String userId) {
        this.store = store;
        this.person = fetchPersonData(userId);
        setupUI();
        populateFields();
    }

    private void setupUI() {
        setTitle("Edit Profile");
        setSize(400, 300);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridLayout(8, 2));

        // Create fields
        usernameField = new JTextField();
        nameField = new JTextField();
        passwordField = new JPasswordField();
        dobField = new JTextField();
        phoneField = new JTextField();
        idCardField = new JTextField();
        pointField = new JTextField();

        // Add components to the frame
        add(new JLabel("Username:"));
        add(usernameField);
        add(new JLabel("Name:"));
        add(nameField);
        add(new JLabel("Password:"));
        add(passwordField);
        add(new JLabel("Date of Birth:"));
        add(dobField);
        add(new JLabel("Phone:"));
        add(phoneField);
        add(new JLabel("ID Card:"));
        add(idCardField);
        add(new JLabel("Point:"));
        add(pointField);

        JButton applyButton = new JButton("Apply Changes");
        applyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updatePerson();
            }
        });
        add(applyButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> dispose());
        add(cancelButton);
    }

    private Person fetchPersonData(String userId) {
        // Fetch user data from the database based on userId
        // Assuming Store class has a method to get a user by ID
        for (Person user : store.getUsers()) {
            if (user.getId().equals(userId)) {
                return user;
            }
        }
        return null; // User not found
    }

    private void populateFields() {
        if (person != null) {
            usernameField.setText(person.getUsername());
            nameField.setText(person.getName());
            passwordField.setText(person.getPassword());
            dobField.setText(person.getDob()); // Assuming getDob() is a method in Person class
            phoneField.setText(person.getPhone()); // Assuming getPhone() is a method in Person class
            idCardField.setText(person.getIdCard()); // Assuming getIdCard() is a method in Person class
            pointField.setText(String.valueOf(person.getPoint())); // Assuming getPoint() is a method in Person class
        }
    }

    private void updatePerson() {
        // Update the person's information in the database
        person.setUsername(usernameField.getText());
        person.setName(nameField.getText());
        person.setPassword(new String(passwordField.getPassword())); // Handle password appropriately
        person.setDob(dobField.getText());
        person.setPhone(phoneField.getText());
        person.setIdCard(idCardField.getText());
        person.setPoint(Integer.parseInt(pointField.getText()));

        // Assuming Store has a method to update the user
        store.updateUser(person); // You'll need to implement this method in Store
        JOptionPane.showMessageDialog(this, "Profile updated successfully.");
        dispose(); // Close the edit window
    }
}
