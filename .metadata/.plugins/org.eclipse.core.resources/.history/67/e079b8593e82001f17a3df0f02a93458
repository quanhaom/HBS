    private void addUser() {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1";
        
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1);
                }
            }

            // Collect user inputs
            String username = JOptionPane.showInputDialog(this, "Enter Username:");
            String password = JOptionPane.showInputDialog(this, "Enter Password:");
            String name = JOptionPane.showInputDialog(this, "Enter Name:");
            
            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);
            
            String dob;
            boolean isValidDate;
            do {
                dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
                isValidDate = dob.matches("\\d{4}-\\d{2}-\\d{2}");
                if (!isValidDate) {
                    JOptionPane.showMessageDialog(this, "Date of Birth must be in the format YYYY-MM-DD!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!isValidDate);
            
            String phone;
            boolean validPhone;
            do {
                phone = JOptionPane.showInputDialog(this, "Enter Phone:");
                validPhone = phone.length() <= 11; // Check if phone number is 11 digits or less
                if (!validPhone) {
                    JOptionPane.showMessageDialog(this, "Phone number must be less than or equal to 11 digits!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!validPhone);
            
            String idCard = JOptionPane.showInputDialog(this, "Enter ID Card:");
            String workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:");
            String salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:");
            String salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:");
            String salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:");
            String point = JOptionPane.showInputDialog(this, "Enter Point:");

            // Loop for validation
            boolean valid = false;
            while (!valid) {
                valid = true;

                if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() || workingHours.isEmpty() || salary1.isEmpty() || point.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                    password = JOptionPane.showInputDialog(this, "Enter Password:", password);
                    name = JOptionPane.showInputDialog(this, "Enter Name:", name);
                    role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, role);
                    dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    phone = JOptionPane.showInputDialog(this, "Enter Phone:", phone);
                    idCard = JOptionPane.showInputDialog(this, "Enter ID Card:", idCard);
                    workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:", workingHours);
                    salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:", salary1);
                    salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:", salary2);
                    salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:", salary3);
                    point = JOptionPane.showInputDialog(this, "Enter Point:", point);
                    valid = false; // Set valid to false to repeat the loop
                }

                // Check for duplicate username
                String sqlCheck = "SELECT COUNT(*) FROM users WHERE username = ?";
                try (PreparedStatement checkStatement = connection.prepareStatement(sqlCheck)) {
                    checkStatement.setString(1, username);
                    ResultSet resultSet = checkStatement.executeQuery();
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        if (count > 0) {
                            JOptionPane.showMessageDialog(this, "Username already exists. Please choose another one!", "Error", JOptionPane.ERROR_MESSAGE);
                            username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                            valid = false; // Set valid to false to repeat the loop
                        }
                    }
                }
            }

            // Insert new user into database
            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            boolean insertSuccessful = false;
            while (!insertSuccessful) {
                try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                    insertStatement.setString(1, id);
                    insertStatement.setString(2, username);
                    insertStatement.setString(3, password);
                    insertStatement.setString(4, name);
                    insertStatement.setString(5, role);
                    insertStatement.setString(6, dob);
                    insertStatement.setString(7, phone);
                    insertStatement.setString(8, idCard);
                    insertStatement.setString(9, workingHours);
                    insertStatement.setString(10, salary1);
                    insertStatement.setString(11, salary2);
                    insertStatement.setString(12, salary3);
                    insertStatement.setString(13, point);
                    insertStatement.executeUpdate();
                    insertSuccessful = true; // Exit loop if insertion was successful
                } catch (SQLException e) {
                    if (e.getMessage().contains("Data truncation: Incorrect date value")) {
                        JOptionPane.showMessageDialog(this, "Invalid date of birth! Please enter a valid date (YYYY-MM-DD):", "Error", JOptionPane.ERROR_MESSAGE);
                        dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    } else {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
                        break; // Exit loop on other SQL errors
                    }
                }
            }

            // Add user to the table model
            tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary1, point});
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }