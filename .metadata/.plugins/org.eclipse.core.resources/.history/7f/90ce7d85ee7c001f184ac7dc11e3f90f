package frame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import model.Product;
import services.Store;

public class ProductFrame extends EmployeeFrame {
	private Store store;
    private ManagerFrame managerFrame;

    public ProductFrame(Store store, ManagerFrame managerFrame) {
        super(store, loginFrame);  // Call BaseFrame constructor
        this.managerFrame = managerFrame;
        setTitle("Product Frame");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Button Panel for Product Actions
        JPanel buttonPanel = new JPanel();
        JButton viewProductButton = new JButton("View Product");
        JButton searchProductButton = new JButton("Search Product");
        JButton logoutButton = new JButton("Logout");
        buttonPanel.add(viewProductButton);
        buttonPanel.add(searchProductButton);
        buttonPanel.add(logoutButton);
        add(buttonPanel, BorderLayout.SOUTH);

        // Event listeners for buttons
        viewProductButton.addActionListener(e -> viewProduct());
        searchProductButton.addActionListener(e -> searchProduct());
        logoutButton.addActionListener(e -> logout());

        loadProducts(); // Load products when frame opens
    }

    private void viewProduct() {
        String selectedProductInfo = productList.getSelectedValue(); // Assuming you have a product list
        if (selectedProductInfo == null) {
            JOptionPane.showMessageDialog(this, "Please select a product to view.");
            return;
        }

        String[] parts = selectedProductInfo.split(",");  // Split by comma
        String id = parts[0].split(":")[1].trim();  // Extract ID from the first part

        Product product = store.getProductById(id);
        if (product != null) {
            JOptionPane.showMessageDialog(this, "Product Details:\n" + product.toString());
        } else {
            JOptionPane.showMessageDialog(this, "Product not found.");
        }
    }

    private void searchProduct() {
        String searchTerm = JOptionPane.showInputDialog(this, "Enter Product ID or Name to search:");
        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            List<Product> products = store.searchProducts(searchTerm); // Assuming you have a search method
            if (!products.isEmpty()) {
                StringBuilder result = new StringBuilder("Search Results:\n");
                for (Product product : products) {
                    result.append(product.toString()).append("\n");
                }
                JOptionPane.showMessageDialog(this, result.toString());
            } else {
                JOptionPane.showMessageDialog(this, "No products found matching the search criteria.");
            }
        }
    }

    private void logout() {
    	this.setVisible(false); // Hide the ProductFrame
        managerFrame.setVisible(true); // Show the ManagerFrame
    }

    private void loadProducts() {
        displayAllProducts(); // Use the method from BaseFrame to load products
    }
}
