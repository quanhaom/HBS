package services;
import java.sql.Types;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Book;
import model.Toy;
import model.Stationery;
import model.Person;
import model.Product;

public class Store {
    private Connection connection;

    public Store() {
        try {
            // Connect to the MySQL database
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@"); // Update with your credentials
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void addUser(Person person) {
        String sql = "INSERT INTO users (id, name, password, role) VALUES (?, ?, ?, ?)"; // Adjust to match the Person class
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, person.getId());
            stmt.setString(2, person.getName());
            stmt.setString(3, person.getPassword()); // Changed to match the Person class
            stmt.setString(4, person.getRole());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Person> getUsers() {
        List<Person> users = new ArrayList<>();
        String sql = "SELECT * FROM users";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Person person = new Person(rs.getString("username"), rs.getString("name"), rs.getString("password"), rs.getString("role"));
                users.add(person);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }

    public void addProduct(Product product) {
        String sqlMaxId = "SELECT MAX(id) FROM products";
        String sqlInsert = "INSERT INTO products (id, name, price, quantity, brand, suitage, material, type, author, isbn, publication_year, publisher) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 

        try {
            int newId = 1; 
            try (PreparedStatement stmtMax = connection.prepareStatement(sqlMaxId);
                 ResultSet rs = stmtMax.executeQuery()) {
                if (rs.next()) {
                    newId = rs.getInt(1) + 1; // Increment max id by 1
                }
            }
            
            try (PreparedStatement stmtInsert = connection.prepareStatement(sqlInsert)) {
                stmtInsert.setInt(1, newId); // Set the new id
                stmtInsert.setString(2, product.getName());
                stmtInsert.setDouble(3, product.getPrice());
                stmtInsert.setInt(4, product.getQuantity());

                if (product instanceof Toy) {
                    Toy toy = (Toy) product;
                    stmtInsert.setString(5, toy.getBrand()); // This sets the brand
                    stmtInsert.setInt(6, toy.getSuitAge()); // This sets the suitable age
                    stmtInsert.setString(7, toy.getMaterial()); // This sets the material; check if getMaterial() is implemented correctly
                    stmtInsert.setString(8, "Toy"); // Set type for Toy
                    stmtInsert.setNull(9, Types.VARCHAR); // Author not applicable
                    stmtInsert.setNull(10, Types.VARCHAR); // ISBN not applicable
                    stmtInsert.setNull(11, Types.INTEGER); // Publication year not applicable
                    stmtInsert.setNull(12, Types.VARCHAR); // Publisher not applicable
                }
                	else if (product instanceof Stationery) {
                    Stationery stationery = (Stationery) product;
                    stmtInsert.setString(5, stationery.getBrand());
                    stmtInsert.setNull(6, Types.INTEGER); // Suitage not applicable
                    stmtInsert.setString(7, stationery.getMaterial());
                    stmtInsert.setString(8,"Stationery"); // Set type for Stationery
                    stmtInsert.setNull(9, Types.VARCHAR); // Author not applicable
                    stmtInsert.setNull(10, Types.VARCHAR); // ISBN not applicable
                    stmtInsert.setNull(11, Types.INTEGER); // Publication year not applicable
                    stmtInsert.setNull(12, Types.VARCHAR); // Publisher not applicable
                } else if (product instanceof Book) {
                    Book book = (Book) product;
                    stmtInsert.setNull(5, Types.VARCHAR); // Brand not applicable
                    stmtInsert.setNull(6, Types.INTEGER); // Suitage not applicable
                    stmtInsert.setNull(7, Types.VARCHAR); // Material not applicable
                    stmtInsert.setString(8, "Book"); // Type not applicable
                    stmtInsert.setString(9, book.getAuthor());
                    stmtInsert.setString(10, book.getIsbn());
                    stmtInsert.setInt(11, book.getPublicationYear());
                    stmtInsert.setString(12, book.getPublisher());
                }

                stmtInsert.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Product> getProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                // Create Product based on type
                String type = rs.getString("type"); // Assuming you have a 'type' column
                Product product;

                switch (type) {
                    case "Toy":
                        product = new Toy(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("brand"),
                            rs.getInt("suitage"),
                            rs.getString("material")
                        );
                        break;
                    case "Stationery":
                        product = new Stationery(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("brand"),
                            rs.getString("material")
                        );
                        break;
                    case "Book":
                        product = new Book(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("author"),
                            rs.getString("isbn"),
                            rs.getInt("publication_year"),
                            rs.getString("publisher")
                        );
                        break;
                    default:
                        continue;
                }
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    public Product getProductById(String productId) {
        Product product = null; 
        String sql = "SELECT * FROM products WHERE id = ?"; // SQL query to find product by ID
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId); // Set the ID parameter
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) { // Check if a product was found
                    String type = rs.getString("type");

                    switch (type) {
                        case "Toy":
                            product = new Toy(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("brand"),
                                rs.getInt("suitage"),
                                rs.getString("material")
                            );
                            break;
                        case "Stationery":
                            product = new Stationery(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("brand"),
                                rs.getString("material")
                            );
                            break;
                        case "Book":
                            product = new Book(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("author"),
                                rs.getString("isbn"),
                                rs.getInt("publication_year"),
                                rs.getString("publisher")
                            );
                            break;
                        default:
                            // Handle unexpected types
                            break;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return product; // Return the found product or null if not found
    }
    public void removeProduct(String productId) {
        String sql = "DELETE FROM products WHERE id = ?"; // SQL query to delete product by ID
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId); // Set the ID parameter
            int rowsAffected = stmt.executeUpdate(); // Execute the update
        } catch (SQLException e) {
            e.printStackTrace(); // Handle SQL exceptions
        }
    }
    public List<Product> searchByAuthor(String author) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE author = ?"; // SQL query to search by author

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, author); // Set the author parameter
            ResultSet rs = stmt.executeQuery(); // Execute the query
            
            while (rs.next()) {
                // Retrieve product details
                String id = rs.getString("id");
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                String authorName = rs.getString("author");
                // Here you might want to create a specific product type, if necessary
                Product product = new Book(id, name, price, quantity, authorName, rs.getString("isbn"), 
                                           rs.getInt("publication_year"), rs.getString("publisher"));
                productList.add(product); // Add the product to the list
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle SQL exceptions
        }
        
        return productList; // Return the list of products by the given author
    }
    public List<Product> searchByName(String name) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE name LIKE ?"; // SQL query to search by name

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, "%" + name + "%"); // Set the name parameter with wildcards for partial matches
            ResultSet rs = stmt.executeQuery(); // Execute the query
            
            while (rs.next()) {
                // Retrieve product details
                String id = rs.getString("id");
                String productName = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                // Here you might want to create a specific product type, if necessary
                Product product = new Product(id, productName, price, quantity); // Adjust this line if you need specific product types
                productList.add(product); // Add the product to the list
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle SQL exceptions
        }
        
        return productList; // Return the list of products by the given name
    }
    public List<Book> searchByPublicationYear(int year) {
        List<Book> bookList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE publication_year = ?"; // SQL query to search by publication year

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, year); // Set the year parameter
            ResultSet rs = stmt.executeQuery(); // Execute the query
            
            while (rs.next()) {
                // Retrieve book details
                String id = rs.getString("id");
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                String author = rs.getString("author");
                String isbn = rs.getString("isbn");
                int publicationYear = rs.getInt("publication_year");
                String publisher = rs.getString("publisher");

                // Create a new Book object
                Book book = new Book(id, name, price, quantity, author, isbn, publicationYear, publisher);
                bookList.add(book); // Add the book to the list
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle SQL exceptions
        }
        
        return bookList; // Return the list of books by the given publication year
    }

    public void updateProduct(Product product) {
        String sql = "UPDATE products SET name = ?, price = ?, quantity = ?, author = ?, isbn = ?, publisher = ?, brand = ?, material = ? WHERE id = ?"; // SQL query to update product details

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, product.getName()); // Set the name
            stmt.setDouble(2, product.getPrice()); // Set the price
            stmt.setInt(3, product.getQuantity()); // Set the quantity

            // Check for subclass type and set additional attributes
            if (product instanceof Book) {
                Book book = (Book) product;
                stmt.setString(4, book.getAuthor()); // Set the author
                stmt.setString(5, book.getIsbn()); // Set the ISBN
                stmt.setString(6, book.getPublisher()); // Set the publisher
                stmt.setNull(7, Types.VARCHAR); // Set brand to null for Book
                stmt.setNull(8, Types.VARCHAR); // Set material to null for Book
            } else if (product instanceof Toy) {
                Toy toy = (Toy) product;
                stmt.setNull(4, Types.VARCHAR); // Set author to null for Toy
                stmt.setNull(5, Types.VARCHAR); // Set ISBN to null for Toy
                stmt.setNull(6, Types.VARCHAR); // Set publisher to null for Toy
                stmt.setString(7, toy.getBrand()); // Set the brand
                stmt.setString(8, toy.getMaterial()); // Set the material
            } else if (product instanceof Stationery) {
                Stationery stationery = (Stationery) product;
                stmt.setNull(4, Types.VARCHAR); // Set author to null for Stationery
                stmt.setNull(5, Types.VARCHAR); // Set ISBN to null for Stationery
                stmt.setNull(6, Types.VARCHAR); // Set publisher to null for Stationery
                stmt.setString(7, stationery.getBrand()); // Set the brand
                stmt.setString(8, stationery.getMaterial()); // Set the material
            } else {
                // For products that don't fit into these categories, set subclass fields to null
                stmt.setNull(4, Types.VARCHAR); // Author
                stmt.setNull(5, Types.VARCHAR); // ISBN
                stmt.setNull(6, Types.VARCHAR); // Publisher
                stmt.setNull(7, Types.VARCHAR); // Brand
                stmt.setNull(8, Types.VARCHAR); // Material
            }

            stmt.setString(9, product.getId()); // Set the product ID to identify which product to update

            int rowsAffected = stmt.executeUpdate(); // Execute the update
        } catch (SQLException e) {
            e.printStackTrace(); // Handle SQL exceptions
        }
    }

    public int getNextProductId() {
        String sqlMaxId = "SELECT COALESCE(MAX(id), 0) FROM products";
        try (PreparedStatement stmt = connection.prepareStatement(sqlMaxId);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1) + 1; // Increment the max ID by 1
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 1; // Default ID if no products exist
    }
}


