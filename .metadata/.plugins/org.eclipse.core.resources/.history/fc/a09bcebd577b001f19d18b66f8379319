package frame;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.DefaultListModel;

import model.Book;
import model.Product;
import model.Stationary;
import model.Toy;
import services.Store;

public class EmployeeFrame extends JFrame {
    private Store store;
    private LoginFrame loginFrame;
    private JTextField searchField;
    private JButton searchButton;
    private JButton addButton;
    private DefaultListModel<String> productListModel;
    private JList<String> productList;
    private JLabel suggestionLabel; // Label for search suggestions

    public EmployeeFrame(Store store, LoginFrame loginFrame) {
        this.store = store;
        this.loginFrame = loginFrame;

        setTitle("Employee Frame");
        setSize(800, 600); // Expanded size
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Search panel
        JPanel searchPanel = new JPanel(new GridLayout(1, 2));
        searchField = new JTextField(15);
        searchButton = new JButton("Search");
        addButton = new JButton("Add Product");
        addButton.setPreferredSize(new java.awt.Dimension(100, 30)); // Smaller size for Add Product button
        suggestionLabel = new JLabel(""); // Initialize suggestion label

        searchPanel.add(searchField);
        searchPanel.add(searchButton);
        searchPanel.add(addButton); // Add button to search panel

        // Product list
        productListModel = new DefaultListModel<>();
        productList = new JList<>(productListModel);
        JScrollPane scrollPane = new JScrollPane(productList);

        // Set layout
        setLayout(new BorderLayout());
        add(searchPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(suggestionLabel, BorderLayout.SOUTH); // Add suggestion label at the bottom

        // Add action listeners
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchProducts(searchField.getText());
            }
        });

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addProduct();
            }
        });

        // Add mouse listener for product list
        productList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Double-click to edit or remove
                    String selectedProduct = productList.getSelectedValue();
                    if (selectedProduct != null) {
                        String productId = selectedProduct.split(":")[0]; // Extract ID from displayed info
                        editOrRemoveProduct(productId);
                    }
                }
            }
        });

        // Add a listener to update suggestions
        searchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateSearchSuggestions();
            }
        });

        loadProducts();
    }

    private void loadProducts() {
        productListModel.clear(); // Clear previous entries
        for (Product product : store.getProducts()) {
            productListModel.addElement(getProductDisplayInfo(product));
        }
    }

    private void searchProducts(String query) {
        productListModel.clear(); // Clear previous results
        List<Product> products = store.getProducts();
        String lowerCaseQuery = query.toLowerCase(); 

        for (Product product : products) {
            String displayInfo = getProductDisplayInfo(product);
            String productType = product instanceof Book ? "Book"
                    : product instanceof Toy ? "Toy" : product instanceof Stationary ? "Stationary" : "";

            // Additional checks for search
            if (product.getId().toLowerCase().contains(lowerCaseQuery)
                    || product.getName().toLowerCase().contains(lowerCaseQuery)
                    || productType.toLowerCase().contains(lowerCaseQuery) // Check for product type
                    || (product instanceof Book && (((Book) product).getAuthor().toLowerCase().contains(lowerCaseQuery)
                            || ((Book) product).getIsbn().toLowerCase().contains(lowerCaseQuery))) // Check for author and ISBN
                    || (product instanceof Toy && ((Toy) product).getBrand().toLowerCase().contains(lowerCaseQuery))) {
                productListModel.addElement(displayInfo);
            }
        }

        if (productListModel.isEmpty()) {
            productListModel.addElement("No products found.");
        }
    }

    private void updateSearchSuggestions() {
        String query = searchField.getText().trim();
        if (query.isEmpty()) {
            suggestionLabel.setText(""); 
            return;
        }

        List<Product> products = store.getProducts();
        List<String> suggestions = products.stream()
                .filter(product -> product.getName().toLowerCase().contains(query.toLowerCase())
                        || (product instanceof Book
                                && (((Book) product).getAuthor().toLowerCase().contains(query.toLowerCase())
                                || ((Book) product).getIsbn().toLowerCase().contains(query.toLowerCase())))
                        || (product instanceof Toy
                                && ((Toy) product).getBrand().toLowerCase().contains(query.toLowerCase()))
                        || (product instanceof Stationary
                                && ((Stationary) product).getBrand().toLowerCase().contains(query.toLowerCase()))
                        || (product instanceof Book && "Book".toLowerCase().contains(query.toLowerCase()))
                        || (product instanceof Toy && "Toy".toLowerCase().contains(query.toLowerCase()))
                        || (product instanceof Stationary && "Stationary".toLowerCase().contains(query.toLowerCase())) 
                )
                .map(Product::getName)
                .collect(Collectors.toList());

        if (!suggestions.isEmpty()) {
            suggestionLabel.setText("Suggestions: " + String.join(", ", suggestions));
        } else {
            suggestionLabel.setText("No suggestions available.");
        }
    }

    private void addProduct() {
        String id = JOptionPane.showInputDialog(this, "Enter Product ID:");
        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        String priceStr = JOptionPane.showInputDialog(this, "Enter Product Price:");
        String quantityStr = JOptionPane.showInputDialog(this, "Enter Quantity:");
        String type = JOptionPane.showInputDialog(this, "Enter Product Type (Book/Toy/Stationery):");

        if (id != null && name != null && priceStr != null && quantityStr != null && type != null) {
            try {
                double price = Double.parseDouble(priceStr);
                int quantity = Integer.parseInt(quantityStr);
                Product product = null;

                switch (type) {
                    case "Book":
                        String author = JOptionPane.showInputDialog(this, "Enter Author:");
                        String publisher = JOptionPane.showInputDialog(this, "Enter Publisher:");
                        String isbn = JOptionPane.showInputDialog(this, "Enter ISBN:");
                        int publicationYear = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Publication Year:"));
                        product = new Book(id, name, price, quantity, author, isbn, publicationYear, publisher);
                        break;
                    case "Toy":
                        String brand = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String material = JOptionPane.showInputDialog(this, "Enter Material:");
                        int suitage = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Suitable Age:"));
                        product = new Toy(id, name, price, quantity, brand, suitage, material);
                        break;
                    case "Stationery":
                        String brandsta = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String typesta = JOptionPane.showInputDialog(this, "Enter Type of Stationery:");
                        String materialsta = JOptionPane.showInputDialog(this, "Enter Material:");
                        product = new Stationary(id, name, price, quantity, brandsta, typesta, materialsta);
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Invalid product type.");
                        return;
                }

                store.addProduct(product);
                JOptionPane.showMessageDialog(this, "Product added successfully!");
                loadProducts(); // Reload the product list
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number format.");
            }
        }
    }

    private void editOrRemoveProduct(String productId) {
        Product product = store.getProductById(productId);
        if (product != null) {
            // Provide editing options
            int choice = JOptionPane.showOptionDialog(this,
                    "What do you want to do?",
                    "Edit or Remove Product",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new Object[]{"Edit", "Remove"},
                    null);

            if (choice == JOptionPane.YES_OPTION) {
                // Edit product
                String newName = JOptionPane.showInputDialog(this, "Enter New Product Name:", product.getName());
                String newPriceStr = JOptionPane.showInputDialog(this, "Enter New Product Price:", product.getPrice());
                String newQuantityStr = JOptionPane.showInputDialog(this, "Enter New Quantity:", product.getQuantity());

                if (newName != null && newPriceStr != null && newQuantityStr != null) {
                    try {
                        double newPrice = Double.parseDouble(newPriceStr);
                        int newQuantity = Integer.parseInt(newQuantityStr);

                        product.setName(newName);
                        product.setPrice(newPrice);
                        product.setQuantity(newQuantity);
                        JOptionPane.showMessageDialog(this, "Product updated successfully!");
                        loadProducts(); // Reload the product list
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Invalid number format.");
                    }
                }
            } else if (choice == JOptionPane.NO_OPTION) {
                // Remove product
                store.removeProduct(productId);
                JOptionPane.showMessageDialog(this, "Product removed successfully!");
                loadProducts(); // Reload the product list
            }
        } else {
            JOptionPane.showMessageDialog(this, "Product not found.");
        }
    }

    private String getProductDisplayInfo(Product product) {
        return product.getId() + ": " + product.getName() + " - $" + product.getPrice() + " (Qty: " + product.getQuantity() + ")";
    }
}
