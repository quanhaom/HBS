package frame;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.DefaultListModel;

import model.Book;
import model.Product;
import model.Stationary;
import model.Toy;
import services.Store;

public class EmployeeFrame extends JFrame {
    private Store store;
    private LoginFrame loginFrame;
    private JTextField searchField;
    private JButton searchButton;
    private JButton addButton;
    private DefaultListModel<String> productListModel;
    private JList<String> productList;

    public EmployeeFrame(Store store, LoginFrame loginFrame) {
        this.store = store;
        this.loginFrame = loginFrame;

        setTitle("Employee Frame");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Search panel
        JPanel searchPanel = new JPanel(new GridLayout(1, 2));
        searchField = new JTextField(15);
        searchButton = new JButton("Search");
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // Product list
        productListModel = new DefaultListModel<>();
        productList = new JList<>(productListModel);
        JScrollPane scrollPane = new JScrollPane(productList);

        // Add buttons
        addButton = new JButton("Add Product");

        // Set layout
        setLayout(new GridLayout(3, 1));
        add(searchPanel);
        add(scrollPane);
        add(addButton);

        // Add action listeners
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchProducts(searchField.getText());
            }
        });

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addProduct();
            }
        });

        // Add mouse listener for product list
        productList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { // Double-click to edit or remove
                    String selectedProduct = productList.getSelectedValue();
                    if (selectedProduct != null) {
                        String productId = selectedProduct.split(":")[0]; // Extract ID from displayed info
                        editOrRemoveProduct(productId);
                    }
                }
            }
        });

        loadProducts();
    }

    private void loadProducts() {
        productListModel.clear(); // Clear previous entries
        for (Product product : store.getProducts()) {
            productListModel.addElement(getProductDisplayInfo(product));
        }
    }

	private void searchProducts(String query) {
	    productListModel.clear(); // Clea r previous results
	    List<Product> products = store.getProducts();
	    String lowerCaseQuery = query.toLowerCase(); 

	    for (Product product : products) {
	        String displayInfo = getProductDisplayInfo(product);
	        String productType = product instanceof Book ? "Book"
	                : product instanceof Toy ? "Toy" : product instanceof Stationary ? "Stationary" : "";

	        // Additional checks for search
	        if (product.getId().toLowerCase().contains(lowerCaseQuery)
	                || product.getName().toLowerCase().contains(lowerCaseQuery)
	                || productType.toLowerCase().contains(lowerCaseQuery) // Check for product type
	                || (product instanceof Book && (((Book) product).getAuthor().toLowerCase().contains(lowerCaseQuery)
	                        || ((Book) product).getIsbn().toLowerCase().contains(lowerCaseQuery))) // Check for author and ISBN
	                || (product instanceof Toy && ((Toy) product).getBrand().toLowerCase().contains(lowerCaseQuery))) {
	            productListModel.addElement(displayInfo);
	        }
	    }

	    if (productListModel.isEmpty()) {
	        productListModel.addElement("No products found.");
	    }
	}


    private void addProduct() {
        String id = JOptionPane.showInputDialog(this, "Enter Product ID:");
        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        String priceStr = JOptionPane.showInputDialog(this, "Enter Product Price:");
        String quantityStr = JOptionPane.showInputDialog(this, "Enter Quantity:");
        String type = JOptionPane.showInputDialog(this, "Enter Product Type (Book/Toy/Stationery):");

        if (id != null && name != null && priceStr != null && quantityStr != null && type != null) {
            try {
                double price = Double.parseDouble(priceStr);
                int quantity = Integer.parseInt(quantityStr);
                Product product = null;

                switch (type) {
                    case "Book":
                        String author = JOptionPane.showInputDialog(this, "Enter Author:");
                        String publisher = JOptionPane.showInputDialog(this, "Enter Publisher:");
                        String isbn = JOptionPane.showInputDialog(this, "Enter ISBN:");
                        int publicationYear = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Publication Year:"));
                        product = new Book(id, name, price, quantity, author, isbn, publicationYear, publisher);
                        break;
                    case "Toy":
                        String brand = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String material = JOptionPane.showInputDialog(this, "Enter Material:");
                        int suitage = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Suitable Age:"));
                        product = new Toy(id, name, price, quantity, brand, suitage, material);
                        break;
                    case "Stationery":
                        String brandsta = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String typesta = JOptionPane.showInputDialog(this, "Enter Type of Stationery:");
                        String materialsta = JOptionPane.showInputDialog(this, "Enter Material:");
                        product = new Stationary(id, name, price, quantity, brandsta, typesta, materialsta);
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Invalid product type.");
                        return;
                }

                store.addProduct(product);
                JOptionPane.showMessageDialog(this, "Product added successfully!");
                loadProducts(); // Reload the product list
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number format.");
            }
        }
    }


    private String getProductDisplayInfo(Product product) {
        return product.getId() + ": " + product.getName() + " (Price: " + product.getPrice() + ", Quantity: " + product.getQuantity() + ")";
    }
}
