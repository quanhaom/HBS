import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private JButton addButton, editButton, removeButton, backButton;
    private JComboBox<String> salaryOptions;
    private ManagerFrame managerFrame;

    public EmpmanaFrame(ManagerFrame managerFrame) {
        this.managerFrame = managerFrame;

        setTitle("User Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        String[] columnNames = {"ID", "Username", "Password", "Name", "Role", "DOB", "Phone", "ID Card", "Working Hours", "Salary", "Point"};
        tableModel = new DefaultTableModel(columnNames, 0);
        employeeTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        addButton = new JButton("Add User");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addUser());

        editButton = new JButton("Edit User");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editUser());

        removeButton = new JButton("Remove User");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeUser());

        backButton = new JButton("Back");
        actionPanel.add(backButton);
        backButton.addActionListener(e -> back());

        salaryOptions = new JComboBox<>(new String[]{"Show Salary1", "Show Salary2", "Show Salary3"});
        salaryOptions.addActionListener(e -> updateSalaryDisplay());
        actionPanel.add(salaryOptions);

        loadUsersFromDatabase();

        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    // Existing loadUsersFromDatabase, updateSalaryDisplay, removeUser, and back methods...

    private void addUser() {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1";

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1);
                }
            }

            String username = JOptionPane.showInputDialog(this, "Enter Username:");
            String password = JOptionPane.showInputDialog(this, "Enter Password:");
            String name = JOptionPane.showInputDialog(this, "Enter Name:");

            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);

            String dob;
            boolean isValidDate;
            do {
                dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
                isValidDate = isValidDate(dob);
                if (!isValidDate) {
                    JOptionPane.showMessageDialog(this, "Date of Birth must be in the format YYYY-MM-DD and a valid date!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!isValidDate);

            String phone;
            boolean validPhone;
            do {
                phone = JOptionPane.showInputDialog(this, "Enter Phone (10 or 11 digits):");
                validPhone = phone.matches("\\d{10,11}"); // Match 10 or 11 digits
                if (!validPhone) {
                    JOptionPane.showMessageDialog(this, "Phone number must be 10 or 11 digits!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!validPhone);

            String idCard = JOptionPane.showInputDialog(this, "Enter ID Card:");
            String workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:");
            String salary1 = "0", salary2 = "0", salary3 = "0"; // Initialize for managers

            // Only prompt for salary if the role is not Manager
            if (!role.equals("Manager")) {
                salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:");
                salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:");
                salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:");
            }

            String point = "0"; // Initialize for managers

            // Only prompt for point if the role is Customer or Employee
            if (role.equals("Customer") || role.equals("Employee")) {
                point = JOptionPane.showInputDialog(this, "Enter Point:");
            }

            boolean valid = false;
            while (!valid) {
                valid = true;

                if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() || workingHours.isEmpty() || (role.equals("Manager") ? false : (salary1.isEmpty() || point.isEmpty()))) {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                    password = JOptionPane.showInputDialog(this, "Enter Password:", password);
                    name = JOptionPane.showInputDialog(this, "Enter Name:", name);
                    role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, role);
                    dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    phone = JOptionPane.showInputDialog(this, "Enter Phone (10 or 11 digits):", phone);
                    idCard = JOptionPane.showInputDialog(this, "Enter ID Card:", idCard);
                    workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:", workingHours);
                    if (!role.equals("Manager")) {
                        salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:", salary1);
                        salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:", salary2);
                        salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:", salary3);
                    }
                    if (role.equals("Customer") || role.equals("Employee")) {
                        point = JOptionPane.showInputDialog(this, "Enter Point:", point);
                    }
                    valid = false;
                }

                String sqlCheck = "SELECT COUNT(*) FROM users WHERE username = ?";
                try (PreparedStatement checkStatement = connection.prepareStatement(sqlCheck)) {
                    checkStatement.setString(1, username);
                    ResultSet resultSet = checkStatement.executeQuery();
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        if (count > 0) {
                            JOptionPane.showMessageDialog(this, "Username already exists. Please choose another one!", "Error", JOptionPane.ERROR_MESSAGE);
                            username = JOptionPane.showInputDialog(this, "Enter Username:", username);
                            valid = false;
                        }
                    }
                }
            }

            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            boolean insertSuccessful = false;
            while (!insertSuccessful) {
                try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                    insertStatement.setString(1, id);
                    insertStatement.setString(2, username);
                    insertStatement.setString(3, password);
                    insertStatement.setString(4, name);
                    insertStatement.setString(5, role);
                    insertStatement.setString(6, dob);
                    insertStatement.setString(7, phone);
                    insertStatement.setString(8, idCard);
                    insertStatement.setString(9, workingHours);
                    insertStatement.setString(10, salary1);
                    insertStatement.setString(11, salary2);
                    insertStatement.setString(12, salary3);
                    insertStatement.setString(13, point);
                    insertStatement.executeUpdate();
                    insertSuccessful = true;
                } catch (SQLException e) {
                    if (e.getMessage().contains("Data truncation: Incorrect date value")) {
                        JOptionPane.showMessageDialog(this, "Invalid date of birth! Please enter a valid date (YYYY-MM-DD):", "Error", JOptionPane.ERROR_MESSAGE);
                        dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):", dob);
                    } else {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(this, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    }
                }
            }

            // Add new user data to the table model
            tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary1, salary2, salary3, point});

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void editUser() {
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String id = tableModel.getValueAt(selectedRow, 0).toString();
        String username = tableModel.getValueAt(selectedRow, 1).toString();
        String password = tableModel.getValueAt(selectedRow, 2).toString();
        String name = tableModel.getValueAt(selectedRow, 3).toString();
        String role = tableModel.getValueAt(selectedRow, 4).toString();
        String dob = tableModel.getValueAt(selectedRow, 5).toString();
        String phone = tableModel.getValueAt(selectedRow, 6).toString();
        String idCard = tableModel.getValueAt(selectedRow, 7).toString();
        String workingHours = tableModel.getValueAt(selectedRow, 8).toString();
        String salary1 = tableModel.getValueAt(selectedRow, 9).toString();
        String salary2 = tableModel.getValueAt(selectedRow, 10).toString();
        String salary3 = tableModel.getValueAt(selectedRow, 11).toString();
        String point = tableModel.getValueAt(selectedRow, 12).toString();

        // Prompt for new values, defaulting to current values
        username = JOptionPane.showInputDialog(this, "Edit Username:", username);
        password = JOptionPane.showInputDialog(this, "Edit Password:", password);
        name = JOptionPane.showInputDialog(this, "Edit Name:", name);
        role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection", JOptionPane.QUESTION_MESSAGE, null, new String[]{"Manager", "Customer", "Employee"}, role);
        dob = JOptionPane.showInputDialog(this, "Edit Date of Birth (YYYY-MM-DD):", dob);
        
        boolean validDate;
        do {
            validDate = isValidDate(dob);
            if (!validDate) {
                JOptionPane.showMessageDialog(this, "Date of Birth must be in the format YYYY-MM-DD and a valid date!", "Error", JOptionPane.ERROR_MESSAGE);
                dob = JOptionPane.showInputDialog(this, "Edit Date of Birth (YYYY-MM-DD):", dob);
            }
        } while (!validDate);

        phone = JOptionPane.showInputDialog(this, "Edit Phone (10 or 11 digits):", phone);
        
        boolean validPhone;
        do {
            validPhone = phone.matches("\\d{10,11}"); // Match 10 or 11 digits
            if (!validPhone) {
                JOptionPane.showMessageDialog(this, "Phone number must be 10 or 11 digits!", "Error", JOptionPane.ERROR_MESSAGE);
                phone = JOptionPane.showInputDialog(this, "Edit Phone (10 or 11 digits):", phone);
            }
        } while (!validPhone);

        idCard = JOptionPane.showInputDialog(this, "Edit ID Card:", idCard);
        workingHours = JOptionPane.showInputDialog(this, "Edit Working Hours:", workingHours);
        salary1 = JOptionPane.showInputDialog(this, "Edit Salary1:", salary1);
        salary2 = JOptionPane.showInputDialog(this, "Edit Salary2:", salary2);
        salary3 = JOptionPane.showInputDialog(this, "Edit Salary3:", salary3);
        point = JOptionPane.showInputDialog(this, "Edit Point:", point);

        // SQL update query
        String sqlUpdate = "UPDATE users SET username = ?, password = ?, name = ?, role = ?, dob = ?, phone = ?, id_card = ?, working_hours = ?, salary1 = ?, salary2 = ?, salary3 = ?, point = ? WHERE id = ?";
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement updateStatement = connection.prepareStatement(sqlUpdate)) {
            updateStatement.setString(1, username);
            updateStatement.setString(2, password);
            updateStatement.setString(3, name);
            updateStatement.setString(4, role);
            updateStatement.setString(5, dob);
            updateStatement.setString(6, phone);
            updateStatement.setString(7, idCard);
            updateStatement.setString(8, workingHours);
            updateStatement.setString(9, salary1);
            updateStatement.setString(10, salary2);
            updateStatement.setString(11, salary3);
            updateStatement.setString(12, point);
            updateStatement.setString(13, id);
            updateStatement.executeUpdate();

            // Update the table model
            tableModel.setValueAt(username, selectedRow, 1);
            tableModel.setValueAt(password, selectedRow, 2);
            tableModel.setValueAt(name, selectedRow, 3);
            tableModel.setValueAt(role, selectedRow, 4);
            tableModel.setValueAt(dob, selectedRow, 5);
            tableModel.setValueAt(phone, selectedRow, 6);
            tableModel.setValueAt(idCard, selectedRow, 7);
            tableModel.setValueAt(workingHours, selectedRow, 8);
            tableModel.setValueAt(salary1, selectedRow, 9);
            tableModel.setValueAt(salary2, selectedRow, 10);
            tableModel.setValueAt(salary3, selectedRow, 11);
            tableModel.setValueAt(point, selectedRow, 12);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Utility method to check if the date format is valid
    private boolean isValidDate(String date) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        sdf.setLenient(false);
        try {
            sdf.parse(date);
            return true;
        } catch (ParseException e) {
            return false;
        }
    }

    public static void main(String[] args) {
        new EmpmanaFrame(new ManagerFrame());
    }
}
