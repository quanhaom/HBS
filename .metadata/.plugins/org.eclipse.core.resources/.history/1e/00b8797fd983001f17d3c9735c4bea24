package frame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel; // Import JLabel
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Product;
import services.Store;

public class CustomerFrame extends BaseFrame {
    private List<Product> cart;
    private LoginFrame loginFrame;
    private JLabel greetingLabel; // Add JLabel for greeting

    public CustomerFrame(Store store, LoginFrame loginFrame, String userName) { // Add userName parameter
        super(store);  
        this.cart = new ArrayList<>(); 
        this.loginFrame = loginFrame; 

        setTitle("Customer Frame");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel buttonPanel = new JPanel();
        JButton viewCartButton = new JButton("View Cart");
        JButton checkoutButton = new JButton("Check out");
        JButton logoutButton = new JButton("Log out");

        buttonPanel.add(viewCartButton);
        buttonPanel.add(checkoutButton);
        buttonPanel.add(logoutButton);
        
        add(buttonPanel, BorderLayout.SOUTH); // Add button panel to the bottom

        // Initialize greeting label and add to a new panel
        greetingLabel = new JLabel("Hello, " + userName); // Set greeting text
        JPanel greetingPanel = new JPanel();
        greetingPanel.add(greetingLabel); // Add greeting label to the panel
        
        // Add greeting panel to the layout above the button panel
        add(greetingPanel, BorderLayout.SOUTH); // Set the greeting panel to SOUTH

        // Reorganize buttonPanel to be displayed above the greetingPanel
        add(buttonPanel, BorderLayout.SOUTH);

        JButton addToCartButton = new JButton("Add to Cart");
        buttonPanel.add(addToCartButton); // Move "Add to Cart" button to the button panel

        addToCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addToCart();
            }
        });

        viewCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                viewCart();
            }
        });

        checkoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                checkout();
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                logout();
            }
        });

        displayAllProducts();
    }

    private void addToCart() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow != -1) {
            String productId = (String) tableModel.getValueAt(selectedRow, 0);
            
            for (Product product : store.getProducts()) {
                if (product.getId().equals(productId)) {
                    cart.add(product);
                    JOptionPane.showMessageDialog(this, product.getName() + " has been added to your cart.");
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Product not found in the store.");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid product to add to cart.");
        }
    }

    private void viewCart() {
        if (cart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
            return;
        }

        StringBuilder cartContents = new StringBuilder("Your Cart:\n");
        for (Product product : cart) {
            cartContents.append(String.format("%s - Price: %.2f\n", product.getName(), product.getPrice()));
        }
        JOptionPane.showMessageDialog(this, cartContents.toString());
    }

    private void checkout() {
        if (cart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
            return;
        }

        JOptionPane.showMessageDialog(this, "Checkout successful!");
        cart.clear();
    }

    private void logout() {
        this.dispose();
        loginFrame.setVisible(true);
    }
}
