package frame;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Image;
import java.awt.Toolkit;
import java.net.URL;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Book;
import model.Product;
import model.Stationary;
import services.Store;
import model.Toy;

public abstract class BaseFrame extends JFrame {
    protected Store store;
    protected JList<String> productList; 
    protected DefaultListModel<String> productListModel; 
    protected JTextField searchField;
    protected JLabel suggestionLabel;
    protected static final int WIDTH = 1000;  // Set your desired width
    protected static final int HEIGHT = 700;

    public BaseFrame(Store store) {
        this.store = store;
        setSize(WIDTH, HEIGHT);  // Set the size here
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        URL url = getClass().getClassLoader().getResource("icon.png"); // Change to your icon file name if it's different
        if (url != null) {
            Image icon = Toolkit.getDefaultToolkit().getImage(url);
            setIconImage(icon);
        } else {
            System.err.println("Icon not found!");
        }
        setLocationRelativeTo(null);
        
        setLayout(new BorderLayout());

        // Search panel with GridBagLayout for centering
        JPanel searchPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Add padding around components

        // Add search label
        gbc.gridx = 0;
        gbc.gridy = 0;
        searchPanel.add(new JLabel("Search:"), gbc);

        // Add search field
        gbc.gridx = 1;
        searchField = new JTextField(20);
        searchPanel.add(searchField, gbc);
        
        
        // Add suggestion label centered
        gbc.gridx = 1; // Center this in the grid
        gbc.gridy = 1; // Move to next row
        suggestionLabel = new JLabel();
        searchPanel.add(suggestionLabel, gbc);
        
        add(searchPanel, BorderLayout.NORTH);

        // Product List
        productListModel = new DefaultListModel<>();
        productList = new JList<>(productListModel);
        add(new JScrollPane(productList), BorderLayout.CENTER);

        // Add search suggestions functionality
        searchField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateSearchSuggestions();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateSearchSuggestions();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                updateSearchSuggestions();
            }
        });

        // Display all products on startup
        displayAllProducts();
    }


    protected String getProductDisplayInfo(Product product) {
        if (product instanceof Book) {
            Book book = (Book) product;
            return String.format("Book - ID: %s, Name: %s, Price: %.2f, Author: %s, ISBN: %s, Quantity: %d",
                    book.getId(), book.getName(), book.getPrice(), book.getAuthor(), book.getIsbn(),
                    book.getQuantity());
        } else if (product instanceof Toy) {
            Toy toy = (Toy) product;
            return String.format("Toy - ID: %s, Name: %s, Price: %.2f, Brand: %s, Suitable Age: %d, Quantity: %d",
                    toy.getId(), toy.getName(), toy.getPrice(), toy.getBrand(), toy.getSuitAge(),
                    toy.getQuantity());
        } else if (product instanceof Stationary) {
            Stationary stationary = (Stationary) product;
            return String.format("Stationary - ID: %s, Name: %s, Price: %.2f, Brand: %s, Quantity: %d",
                    stationary.getId(), stationary.getName(), stationary.getPrice(), stationary.getBrand(),
                    stationary.getQuantity());
        }
        return ""; 
    }

    protected void displayAllProducts() {
        productListModel.clear();
        List<Product> products = store.getProducts();

        for (Product product : products) {
            String displayInfo = getProductDisplayInfo(product);
            productListModel.addElement(displayInfo);
        }
    }

    protected void updateSearchSuggestions() {
        String query = searchField.getText().trim();
        productListModel.clear();  // Clear the product list model to refresh suggestions

        if (query.isEmpty()) {
            suggestionLabel.setText(""); // Clear suggestions when the query is empty
            displayAllProducts(); // Show all products when there is no search query
            return;
        }

        List<Product> products = store.getProducts();
        List<Product> filteredProducts = products.stream()
                .filter(product -> 
                        product.getId().toLowerCase().contains(query.toLowerCase()) || 
                        product.getName().toLowerCase().contains(query.toLowerCase()) ||  
                        String.valueOf(product.getPrice()).toLowerCase().contains(query.toLowerCase()) || // Price check
                        (product instanceof Book
                                && (((Book) product).getAuthor().toLowerCase().contains(query.toLowerCase())
                                || ((Book) product).getIsbn().toLowerCase().contains(query.toLowerCase()))) ||
                        (product instanceof Toy
                                && ((Toy) product).getBrand().toLowerCase().contains(query.toLowerCase())) ||
                        (product instanceof Stationary
                                && ((Stationary) product).getBrand().toLowerCase().contains(query.toLowerCase())) ||
                        (product instanceof Book && "Book".toLowerCase().contains(query.toLowerCase())) ||
                        (product instanceof Toy && "Toy".toLowerCase().contains(query.toLowerCase())) ||
                        (product instanceof Stationary && "Stationary".toLowerCase().contains(query.toLowerCase()))
                )
                .collect(Collectors.toList());

        if (!filteredProducts.isEmpty()) {
            for (Product product : filteredProducts) {
                String displayInfo = getProductDisplayInfo(product);  // Get the product info for display
                productListModel.addElement(displayInfo);  // Add the product to the list model
            }

        } else {
            productListModel.addElement("No products found.");  // Show a "No products found" message
        }
    }


}
