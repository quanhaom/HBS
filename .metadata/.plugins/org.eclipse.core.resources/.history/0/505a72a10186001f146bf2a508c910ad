package model;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;

public class Manager extends Employee {

    public Manager(String id, String username, String password, String name, String role,
                   String dob, String phone, String idCard, int workingHours,
                   double salary1, double salary2, double salary3) {
        super(id, username, password, name, role, dob, phone, idCard, workingHours, salary1, salary2, salary3);
    }

    // Calculate total compensation based on salary fields
    public double calculateTotalCompensation() {
        return getSalary1() + getSalary2() + getSalary3();
    }

    // Add a new user to the database
    public void addUser(DefaultTableModel tableModel) {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1";

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "your_password")) {
            // Get the next available ID
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1);
                }
            }

            // Prompt for user details
            String username = JOptionPane.showInputDialog("Enter Username:");
            String password = JOptionPane.showInputDialog("Enter Password:");
            String name = JOptionPane.showInputDialog("Enter Name:");

            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(null, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]);

            // Validate date of birth
            String dob;
            boolean isValidDate;
            do {
                dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):");
                isValidDate = dob.matches("\\d{4}-\\d{2}-\\d{2}");
                if (!isValidDate) {
                    JOptionPane.showMessageDialog(null, "Date of Birth must be in the format YYYY-MM-DD!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!isValidDate);

            // Validate phone number
            String phone;
            boolean validPhone;
            do {
                phone = JOptionPane.showInputDialog("Enter Phone:");
                validPhone = (phone.matches("\\d{10,11}") && phone.startsWith("0"));
                if (!phone.matches("\\d{10,11}")) {
                    JOptionPane.showMessageDialog(null, "Phone number must be 10 or 11 digits!", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (!phone.startsWith("0")) {
                    JOptionPane.showMessageDialog(null, "Phone number must start by 0!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } while (!validPhone);

            String idCard = JOptionPane.showInputDialog("Enter ID Card:");
            String workingHours = "0";
            String salary1 = "0", salary2 = "0", salary3 = "0";

            // Handle salary inputs based on role
            if (!role.equals("Manager")) {
                salary1 = JOptionPane.showInputDialog("Enter Salary1:");
                salary2 = JOptionPane.showInputDialog("Enter Salary2:");
                salary3 = JOptionPane.showInputDialog("Enter Salary3:");
            }

            String point = "0";
            if (role.equals("Customer")) {
                point = JOptionPane.showInputDialog("Enter Point:");
            }

            // Validate input fields
            boolean valid = false;
            while (!valid) {
                valid = true;

                if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() ||
                    (role.equals("Manager") ? workingHours.isEmpty() : false) ||
                    (role.equals("Manager") ? (salary1.isEmpty() || salary2.isEmpty() || salary3.isEmpty()) : false) ||
                    (role.equals("Customer") || role.equals("Employee") ? point.isEmpty() : false)) {

                    JOptionPane.showMessageDialog(null, "Please fill in all fields!", "Error", JOptionPane.ERROR_MESSAGE);
                    username = JOptionPane.showInputDialog("Enter Username:", username);
                    password = JOptionPane.showInputDialog("Enter Password:", password);
                    name = JOptionPane.showInputDialog("Enter Name:", name);
                    role = (String) JOptionPane.showInputDialog(null, "Select Role:", "Role Selection", JOptionPane.QUESTION_MESSAGE, null, roles, role);
                    dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):", dob);
                    phone = JOptionPane.showInputDialog("Enter Phone:", phone);
                    idCard = JOptionPane.showInputDialog("Enter ID Card:", idCard);
                    if (role.equals("Manager")) {
                        workingHours = JOptionPane.showInputDialog("Enter Working Hours:", workingHours);
                        salary1 = JOptionPane.showInputDialog("Enter Salary1:", salary1);
                        salary2 = JOptionPane.showInputDialog("Enter Salary2:", salary2);
                        salary3 = JOptionPane.showInputDialog("Enter Salary3:", salary3);
                    }
                    if (role.equals("Customer") || role.equals("Employee")) {
                        point = JOptionPane.showInputDialog("Enter Point:", point);
                    }
                    valid = false;
                }

                // Check for username uniqueness
                String sqlCheck = "SELECT COUNT(*) FROM users WHERE username = ?";
                try (PreparedStatement checkStatement = connection.prepareStatement(sqlCheck)) {
                    checkStatement.setString(1, username);
                    ResultSet resultSet = checkStatement.executeQuery();
                    if (resultSet.next()) {
                        int count = resultSet.getInt(1);
                        if (count > 0) {
                            JOptionPane.showMessageDialog(null, "Username already exists. Please choose another one!", "Error", JOptionPane.ERROR_MESSAGE);
                            username = JOptionPane.showInputDialog("Enter Username:", username);
                            valid = false;
                        }
                    }
                }
            }

            // Insert new user into the database
            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            boolean insertSuccessful = false;
            while (!insertSuccessful) {
                try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                    insertStatement.setString(1, id);
                    insertStatement.setString(2, username);
                    insertStatement.setString(3, password);
                    insertStatement.setString(4, name);
                    insertStatement.setString(5, role);
                    insertStatement.setString(6, dob);
                    insertStatement.setString(7, phone);
                    insertStatement.setString(8, idCard);
                    insertStatement.setString(9, role.equals("Manager") ? workingHours : null); // Set working hours only for managers
                    insertStatement.setString(10, salary1);
                    insertStatement.setString(11, salary2);
                    insertStatement.setString(12, salary3);
                    insertStatement.setString(13, point);
                    insertStatement.executeUpdate();
                    insertSuccessful = true;
                } catch (SQLException e) {
                    if (e.getMessage().contains("Data truncation: Incorrect date value")) {
                        JOptionPane.showMessageDialog(null, "Invalid date of birth! Please enter a valid date (YYYY-MM-DD):", "Error", JOptionPane.ERROR_MESSAGE);
                        dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):", dob);
                    } else {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
                        break; // Exit loop on error
                    }
                }
            }

            // Update the table model
            tableModel.addRow(new Object[]{
                id, username, password, name, role, dob, phone, idCard,
                (role.equals("Employee") ? workingHours : ""),
                (role.equals("Employee") ? "" : salary1),
                (role.equals("Employee") ? "" : salary2),
                (role.equals("Employee") ? "" : salary3),
                (role.equals("Customer") ? point : "")
            });
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "An error occurred while adding the user!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Edit an existing user
    public void editUser(JTable table) {
        int selectedRow = table.getSelectedRow();

        if (selectedRow != -1) {
            // Get current user details from the selected row
            String id = (String) table.getValueAt(selectedRow, 0);
            String username = (String) table.getValueAt(selectedRow, 1);
            String password = (String) table.getValueAt(selectedRow, 2);
            String name = (String) table.getValueAt(selectedRow, 3);
            String role = (String) table.getValueAt(selectedRow, 4);
            String dob = (String) table.getValueAt(selectedRow, 5);
            String phone = (String) table.getValueAt(selectedRow, 6);
            String idCard = (String) table.getValueAt(selectedRow, 7);
            String workingHours = (String) table.getValueAt(selectedRow, 8);
            String salary1 = (String) table.getValueAt(selectedRow, 9);
            String salary2 = (String) table.getValueAt(selectedRow, 10);
            String salary3 = (String) table.getValueAt(selectedRow, 11);
            String point = (String) table.getValueAt(selectedRow, 12);

            // Prompt for updated details
            username = JOptionPane.showInputDialog("Enter Username:", username);
            password = JOptionPane.showInputDialog("Enter Password:", password);
            name = JOptionPane.showInputDialog("Enter Name:", name);
            dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):", dob);
            phone = JOptionPane.showInputDialog("Enter Phone:", phone);
            idCard = JOptionPane.showInputDialog("Enter ID Card:", idCard);
            if (role.equals("Manager")) {
                workingHours = JOptionPane.showInputDialog("Enter Working Hours:", workingHours);
                salary1 = JOptionPane.showInputDialog("Enter Salary1:", salary1);
                salary2 = JOptionPane.showInputDialog("Enter Salary2:", salary2);
                salary3 = JOptionPane.showInputDialog("Enter Salary3:", salary3);
            }
            if (role.equals("Customer")) {
                point = JOptionPane.showInputDialog("Enter Point:", point);
            }

            // Update the user in the database
            String sqlUpdate = "UPDATE users SET username=?, password=?, name=?, dob=?, phone=?, id_card=?, " +
                    (role.equals("Manager") ? "working_hours=?, salary1=?, salary2=?, salary3=?" : "point=?") +
                    " WHERE id=?";
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "your_password");
                 PreparedStatement updateStatement = connection.prepareStatement(sqlUpdate)) {
                updateStatement.setString(1, username);
                updateStatement.setString(2, password);
                updateStatement.setString(3, name);
                updateStatement.setString(4, dob);
                updateStatement.setString(5, phone);
                updateStatement.setString(6, idCard);
                if (role.equals("Manager")) {
                    updateStatement.setString(7, workingHours);
                    updateStatement.setString(8, salary1);
                    updateStatement.setString(9, salary2);
                    updateStatement.setString(10, salary3);
                } else {
                    updateStatement.setString(7, point);
                }
                updateStatement.setString(role.equals("Manager") ? 10 : 8, id);
                updateStatement.executeUpdate();

                // Update the table model
                table.setValueAt(username, selectedRow, 1);
                table.setValueAt(password, selectedRow, 2);
                table.setValueAt(name, selectedRow, 3);
                table.setValueAt(dob, selectedRow, 5);
                table.setValueAt(phone, selectedRow, 6);
                table.setValueAt(idCard, selectedRow, 7);
                if (role.equals("Manager")) {
                    table.setValueAt(workingHours, selectedRow, 8);
                    table.setValueAt(salary1, selectedRow, 9);
                    table.setValueAt(salary2, selectedRow, 10);
                    table.setValueAt(salary3, selectedRow, 11);
                } else {
                    table.setValueAt(point, selectedRow, 12);
                }

                JOptionPane.showMessageDialog(null, "User updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "An error occurred while updating the user!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a user to edit!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Delete a user from the database
    public void deleteUser(JTable table) {
        int selectedRow = table.getSelectedRow();

        if (selectedRow != -1) {
            String id = (String) table.getValueAt(selectedRow, 0);

            // Confirm deletion
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String sqlDelete = "DELETE FROM users WHERE id=?";
                try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "your_password");
                     PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                    deleteStatement.setString(1, id);
                    deleteStatement.executeUpdate();

                    // Remove the row from the table model
                    ((DefaultTableModel) table.getModel()).removeRow(selectedRow);
                    JOptionPane.showMessageDialog(null, "User deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "An error occurred while deleting the user!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a user to delete!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
}
