package frame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class EditPro extends JFrame {
    private JTextField usernameField;
    private JTextField passwordField; // Change to JTextField to make it editable
    private JTextField nameField;
    private JTextField dobField;
    private JTextField phoneField;
    private JTextField idCardField;
    private JTextField pointField;
    private JLabel roleLabel; // Display role as a label since it can't be edited
    private String loggedInUsername; // To fetch user details

    public EditPro(CustomerFrame a,String loggedInUsername) {
        this.loggedInUsername = loggedInUsername;

        setTitle("Edit Profile");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(0, 2));

        // Fetch the user's information to display
        fetchUserInfo();

        // Create input fields
        usernameField = new JTextField();
        passwordField = new JTextField(); // Use JTextField for visible password
        nameField = new JTextField();
        dobField = new JTextField();
        phoneField = new JTextField();
        idCardField = new JTextField();
        pointField = new JTextField();

        // Set fields with user data
        usernameField.setText(usernameField.getText());
        passwordField.setText(passwordField.getText()); // Make sure this is set after fetching user data
        nameField.setText(nameField.getText());
        dobField.setText(dobField.getText());
        phoneField.setText(phoneField.getText());
        idCardField.setText(idCardField.getText());
        pointField.setText(pointField.getText());

        // Add components to the frame
        add(new JLabel("Username:"));
        add(usernameField);
        add(new JLabel("Password:"));
        add(passwordField);
        add(new JLabel("Name:"));
        add(nameField);
        add(new JLabel("Role:"));
        roleLabel = new JLabel(); // Role is not editable
        add(roleLabel);
        add(new JLabel("Date of Birth:"));
        add(dobField);
        add(new JLabel("Phone:"));
        add(phoneField);
        add(new JLabel("ID Card:"));
        add(idCardField);
        add(new JLabel("Points:"));
        add(pointField);

        // Create Apply and Cancel buttons
        JButton applyButton = new JButton("Apply");
        JButton cancelButton = new JButton("Cancel");
        applyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                applyChanges();
            }
        });

        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose(); // Close the EditPro frame
            }
        });

        add(applyButton);
        add(cancelButton);
    }

    // Fetch the user's information from the database
    private void fetchUserInfo() {
        String query = "SELECT * FROM users WHERE username = ?"; // Fetch all required user data
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, loggedInUsername);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                usernameField.setText(rs.getString("username"));
                passwordField.setText(rs.getString("password")); // Fetch password
                nameField.setText(rs.getString("name"));
                roleLabel.setText(rs.getString("role")); // Display role
                dobField.setText(rs.getString("dob"));
                phoneField.setText(rs.getString("phone"));
                idCardField.setText(rs.getString("id_card"));
                pointField.setText(rs.getString("point"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error fetching user information: " + e.getMessage());
        }
    }

    // Apply changes to the user's profile
    private void applyChanges() {
        String query = "UPDATE users SET username = ?, password = ?, name = ?, dob = ?, phone = ?, id_card = ?, point = ? WHERE username = ?";
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, usernameField.getText());
            stmt.setString(2, passwordField.getText()); // Use JTextField to get the password
            stmt.setString(3, nameField.getText());
            stmt.setString(4, dobField.getText());
            stmt.setString(5, phoneField.getText());
            stmt.setString(6, idCardField.getText());
            stmt.setInt(7, Integer.parseInt(pointField.getText()));
            stmt.setString(8, loggedInUsername); // Use original username to identify user

            stmt.executeUpdate();
            JOptionPane.showMessageDialog(this, "Profile updated successfully.");
            dispose(); // Close the frame after updating
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating profile: " + e.getMessage());
        }
    }
}
