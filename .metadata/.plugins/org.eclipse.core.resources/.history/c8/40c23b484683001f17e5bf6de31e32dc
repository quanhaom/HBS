package frame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JLabel; // Import JLabel for displaying the name
import model.Product;
import services.Store;

public class CustomerFrame extends BaseFrame {
    private List<Product> cart;
    private LoginFrame loginFrame;
    private String loggedInUsername; // Store the logged-in username
    private JLabel greetingLabel; // Label to display the greeting

    public CustomerFrame(Store store, LoginFrame loginFrame, String loggedInUsername) {
        super(store);  
        this.cart = new ArrayList<>(); 
        this.loginFrame = loginFrame; 
        this.loggedInUsername = loggedInUsername; // Initialize the logged-in username

        setTitle("Customer Frame");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Set up greeting label
        greetingLabel = new JLabel(); // Initialize the greeting label
        add(greetingLabel, BorderLayout.NORTH); // Add label to the top of the frame

        // Fetch and display the user's name with a greeting
        String name = fetchUserName();
        if (name != null) {
            greetingLabel.setText("Hello, " + name + "!"); // Display the greeting
            greetingLabel.setToolTipText("Click to log out or edit profile"); // Optional tooltip
        }

        // Create a panel for buttons
        JPanel buttonPanel = new JPanel();
        JButton addToCartButton = new JButton("Add to Cart");
        JButton viewCartButton = new JButton("View Cart");
        JButton checkoutButton = new JButton("Check out");
        JButton logoutButton = new JButton("Log out");
        buttonPanel.add(addToCartButton);
        buttonPanel.add(viewCartButton);
        buttonPanel.add(checkoutButton);
        buttonPanel.add(logoutButton);
        add(buttonPanel, BorderLayout.SOUTH);

        addToCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addToCart();
            }
        });

        viewCartButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                viewCart();
            }
        });

        checkoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                checkout();
            }
        });

        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                logout();
            }
        });

        // Action for greeting label click (simulated)
        greetingLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showGreetingOptions();
            }
        });

        displayAllProducts();
    }

    // Show a greeting with options
    private void showGreetingOptions() {
        Object[] options = {"Logout", "Edit Profile"};
        int choice = JOptionPane.showOptionDialog(this, "Choose an option:",
                "Welcome", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE,
                null, options, options[0]);

        // Handle user choice
        if (choice == JOptionPane.YES_OPTION) {
            logout(); // Logout
        } else if (choice == JOptionPane.NO_OPTION) {
            editProfile(); // Edit Profile
        }
    }

    // Fetch the user's name from the database based on the logged-in username
    private String fetchUserName() {
        String name = null;
        String query = "SELECT name FROM users WHERE username = ?"; // Assuming 'users' table

        // Establish the connection directly in CustomerFrame
        try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@"); 
             PreparedStatement stmt = conn.prepareStatement(query)) {
            stmt.setString(1, loggedInUsername);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                name = rs.getString("name");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error fetching user information: " + e.getMessage());
        }

        return name;
    }

    // Method to handle editing the profile
    private void editProfile() {
        // Implement your profile editing logic here
        JOptionPane.showMessageDialog(this, "Profile editing feature is not implemented yet.");
    }

    // Add the selected product to the cart
    private void addToCart() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow != -1) {
            String productId = (String) tableModel.getValueAt(selectedRow, 0);
            
            for (Product product : store.getProducts()) {
                if (product.getId().equals(productId)) {
                    cart.add(product);
                    JOptionPane.showMessageDialog(this, product.getName() + " has been added to your cart.");
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "Product not found in the store.");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid product to add to cart.");
        }
    }

    // View the contents of the cart
    private void viewCart() {
        if (cart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
            return;
        }

        StringBuilder cartContents = new StringBuilder("Your Cart:\n");
        for (Product product : cart) {
            cartContents.append(String.format("%s - Price: %.2f\n", product.getName(), product.getPrice()));
        }
        JOptionPane.showMessageDialog(this, cartContents.toString());
    }

    // Checkout the cart
    private void checkout() {
        if (cart.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Your cart is empty.");
            return;
        }

        JOptionPane.showMessageDialog(this, "Checkout successful!");
        cart.clear();
    }

    // Logout and return to the login frame
    private void logout() {
        this.dispose();
        loginFrame.setVisible(true);
    }
}
