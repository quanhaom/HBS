package frame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

import model.Book;
import model.Stationary;
import model.Toy;
import model.Product;
import services.Store;

public class EmployeeFrame extends CustomerFrame {
    private DefaultListModel<String> productListModel;
    private JTextField priceField, quantityField;
    private JButton addButton, editButton, removeButton;
    private JList<String> productList;

    public EmployeeFrame(Store store, LoginFrame loginFrame) {
        super(store, loginFrame);

        setTitle("Employee Frame");

        // Create additional components for managing products
        productListModel = new DefaultListModel<>();
        productList = new JList<>(productListModel);
        productList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        add(new JScrollPane(productList), BorderLayout.CENTER);

        // Additional input fields
        priceField = new JTextField(10);
        quantityField = new JTextField(10);
        JPanel inputPanel = new JPanel();
        inputPanel.add(new JLabel("Price:"));
        inputPanel.add(priceField);
        inputPanel.add(new JLabel("Quantity:"));
        inputPanel.add(quantityField);
        add(inputPanel, BorderLayout.SOUTH);

        // Buttons for employee functionalities
        addButton = new JButton("Add Product");
        editButton = new JButton("Edit Product");
        removeButton = new JButton("Remove Product");
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(editButton);
        buttonPanel.add(removeButton);
        add(buttonPanel, BorderLayout.SOUTH);

        // Action listeners for buttons
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addProduct();
            }
        });

        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                editProduct();
            }
        });

        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeProduct();
            }
        });

        // Initialize product list
        loadProducts();
    }

    private void addProduct() {
        String id = JOptionPane.showInputDialog(this, "Enter Product ID:");
        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        String priceStr = JOptionPane.showInputDialog(this, "Enter Product Price:");
        String quantityStr = JOptionPane.showInputDialog(this, "Enter Quantity:");
        String type = JOptionPane.showInputDialog(this, "Enter Product Type (Book/Toy/Stationery):");

        if (id != null && name != null && priceStr != null && quantityStr != null && type != null) {
            try {
                double price = Double.parseDouble(priceStr);
                int quantity = Integer.parseInt(quantityStr);
                Product product = null;

                switch (type) {
                    case "Book":
                        String author = JOptionPane.showInputDialog(this, "Enter Author:");
                        String publisher = JOptionPane.showInputDialog(this, "Enter Publisher:");
                        String isbn = JOptionPane.showInputDialog(this, "Enter ISBN:");
                        int publicationYear = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Publication Year:"));
                        product = new Book(id, name, price, quantity, author, isbn, publicationYear, publisher);
                        break;
                    case "Toy":
                        String brand = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String material = JOptionPane.showInputDialog(this, "Enter Material:");
                        int suitage = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Suitable Age:"));
                        product = new Toy(id, name, price, quantity, brand, suitage, material);
                        break;
                    case "Stationery":
                        String brandsta = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String typesta = JOptionPane.showInputDialog(this, "Enter Type of Stationery:");
                        String materialsta = JOptionPane.showInputDialog(this, "Enter Material:");
                        product = new Stationary(id, name, price, quantity, brandsta, typesta, materialsta);
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Invalid product type.");
                        return;
                }

                store.addProduct(product);
                JOptionPane.showMessageDialog(this, "Product added successfully!");
                loadProducts(); // Reload the product list
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid number format.");
            }
        }
    }

    private void loadProducts() {
        productListModel.clear(); // Clear previous content
        List<Product> products = store.getProducts();
        for (Product product : products) {
            productListModel.addElement(getProductDisplayInfo(product));
        }
    }

    private void removeProduct() {
        // Logic for removing a selected product
        String selectedProduct = productList.getSelectedValue();
        if (selectedProduct != null) {
            String productId = selectedProduct.split(": ")[0]; // Extract product ID
            store.removeProduct(productId); // Assuming a method to remove product by ID
            loadProducts(); // Refresh product list
            JOptionPane.showMessageDialog(this, "Product removed successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product to remove.");
        }
    }

    private void editProduct() {
        // Logic for editing a selected product
        String selectedProduct = productList.getSelectedValue();
        if (selectedProduct != null) {
            // Implement your edit logic here (similar to addProduct)
        } else {
            JOptionPane.showMessageDialog(this, "Please select a product to edit.");
        }
    }

    private String getProductDisplayInfo(Product product) {
        return product.getId() + ": " + product.getName() + " (Price: " + product.getPrice() + ", Quantity: " + product.getQuantity() + ")";
    }
}
