package frame;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel; // Model for the table
    private JButton addButton, editButton, removeButton;
    private JTextField searchField;

    public EmpmanaFrame() {
        setTitle("User Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Create data model for the table
        String[] columnNames = {"ID", "Username", "Password", "Name", "Role", "DOB", "Phone", "ID Card", "Working Hours", "Salary", "Point"};
        tableModel = new DefaultTableModel(columnNames, 0);
        employeeTable = new JTable(tableModel) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make only salary and point columns editable
                return column == 9 || column == 11;
            }
        };

        // Add JComboBox for salary selection in the salary column
        employeeTable.getColumnModel().getColumn(9).setCellEditor(new DefaultCellEditor(new JComboBox<>(new String[]{"Salary1", "Salary2", "Salary3"})));

        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        // Create panel for buttons and search
        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        searchField = new JTextField(15);
        actionPanel.add(searchField);

        addButton = new JButton("Add User");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addUser());

        editButton = new JButton("Edit User");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editUser());

        removeButton = new JButton("Remove User");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeUser());

        // Load data from the database
        loadUsersFromDatabase();

        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void loadUsersFromDatabase() {
        try {
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
            Statement statement = connection.createStatement();
            String query = "SELECT * FROM users";
            ResultSet resultSet = statement.executeQuery(query);
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String name = resultSet.getString("name");
                String role = resultSet.getString("role");
                String dob = resultSet.getString("dob");
                String phone = resultSet.getString("phone");
                String idCard = resultSet.getString("id_card");
                String workingHours = resultSet.getString("working_hours");
                String salary = resultSet.getString("salary1"); // Display only Salary1
                String point = resultSet.getString("point");

                tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary, point});
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading data from database.");
        }
    }

    private void addUser() {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1"; // Default value if no users exist

        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            // Get next ID
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1); // Increment ID
                }
            }

            // Input user information
            String username = JOptionPane.showInputDialog(this, "Enter Username:");
            String password = JOptionPane.showInputDialog(this, "Enter Password:");
            String name = JOptionPane.showInputDialog(this, "Enter Name:");

            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]); // Default to first option

            String dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
            String phone = JOptionPane.showInputDialog(this, "Enter Phone:");
            String idCard = JOptionPane.showInputDialog(this, "Enter ID Card:");
            String workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:");
            String salary = JOptionPane.showInputDialog(this, "Enter Salary1:");
            String point = JOptionPane.showInputDialog(this, "Enter Point:");

            // Add user to the database
            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                insertStatement.setString(1, id);
                insertStatement.setString(2, username);
                insertStatement.setString(3, password);
                insertStatement.setString(4, name);
                insertStatement.setString(5, role);
                insertStatement.setString(6, dob);
                insertStatement.setString(7, phone);
                insertStatement.setString(8, idCard);
                insertStatement.setString(9, workingHours);
                insertStatement.setString(10, salary);
                insertStatement.setString(11, point);
                insertStatement.executeUpdate(); // Execute insert
            }

            // Update table
            tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary, point});
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    tableModel.setValueAt(point, selectedRow, 10);

    // Update user information in the database
    try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
        String sqlUpdate = "UPDATE users SET username=?, password=?, name=?, role=?, dob=?, phone=?, id_card=?, working_hours=?, salary1=?, point=? WHERE id=?";
        try (PreparedStatement updateStatement = connection.prepareStatement(sqlUpdate)) {
            updateStatement.setString(1, username);
            updateStatement.setString(2, password);
            updateStatement.setString(3, name);
            updateStatement.setString(4, role);
            updateStatement.setString(5, dob);
            updateStatement.setString(6, phone);
            updateStatement.setString(7, idCard);
            updateStatement.setString(8, workingHours);
            updateStatement.setString(9, salary);
            updateStatement.setString(10, point);
            updateStatement.setString(11, id);
            updateStatement.executeUpdate(); // Execute update
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select a user to edit.");
}
}

private void removeUser() {
int selectedRow = employeeTable.getSelectedRow();
if (selectedRow != -1) {
    String id = (String) tableModel.getValueAt(selectedRow, 0);
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete user ID: " + id + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        // Remove user from database
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            String sqlDelete = "DELETE FROM users WHERE id=?";
            try (PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                deleteStatement.setString(1, id);
                deleteStatement.executeUpdate(); // Execute delete
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Remove from table
        tableModel.removeRow(selectedRow);
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select a user to remove.");
}
}

public static void main(String[] args) {
SwingUtilities.invokeLater(EmpmanaFrame::new);
}
}
