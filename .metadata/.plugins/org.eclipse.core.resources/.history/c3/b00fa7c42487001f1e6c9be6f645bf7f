package services;
import java.sql.Types;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Book;
import model.Toy;
import model.Stationery;
import model.Person;
import model.Product;

public class Store {
    private Connection connection;

    public Store() {
        try {
            connection = new MySQLConnection().getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Person> getUsers() {
        List<Person> users = new ArrayList<>();
        String sql = "SELECT id, username, password, name, role FROM users"; 
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Person person = new Person(
                    rs.getString("id"), 
                    rs.getString("username"),
                    rs.getString("password"),
                    rs.getString("name"),
                    rs.getString("role")
                );
                users.add(person);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }
    public List<Product> getProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                String type = rs.getString("type");
                Product product;

                switch (type) {
                    case "Toy":
                        product = new Toy(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getDouble("inputprice"),
                            rs.getString("brand"),
                            rs.getInt("suitage"),
                            rs.getString("material")
                        );
                        break;
                    case "Stationery":
                        product = new Stationery(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getDouble("inputprice"),
                            rs.getString("brand"),
                            rs.getString("material")
                        );
                        break;
                    case "Book":
                        product = new Book(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getDouble("inputprice"),
                            rs.getString("author"),
                            rs.getString("isbn"),
                            rs.getInt("publication_year"),
                            rs.getString("publisher")
                        );
                        break;
                    default:
                        continue;
                }
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    public Product getProductById(String productId) {
        Product product = null; 
        String sql = "SELECT * FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) { 
                    String type = rs.getString("type");

                    switch (type) {
                        case "Toy":
                            product = new Toy(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getDouble("inputprice"),
                                rs.getString("brand"),
                                rs.getInt("suitage"),
                                rs.getString("material")
                            );
                            break;
                        case "Stationery":
                            product = new Stationery(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getDouble("inputprice"),
                                rs.getString("brand"),
                                rs.getString("material")
                            );
                            break;
                        case "Book":
                            product = new Book(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getDouble("inputprice"),
                                rs.getString("author"),
                                rs.getString("isbn"),
                                rs.getInt("publication_year"),
                                rs.getString("publisher")
                            );
                            break;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return product; 
    }
    public void removeProduct(String productId) {
        String sql = "DELETE FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId); 
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public List<Product> searchByAuthor(String author) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE author = ?"; 

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, author); 
            ResultSet rs = stmt.executeQuery(); 
            
            while (rs.next()) {
                String id = rs.getString("id");
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                double inputprice = rs.getDouble("inputprice");
                String authorName = rs.getString("author");
                Product product = new Book(id, name, price, quantity,inputprice, authorName, rs.getString("isbn"), 
                                           rs.getInt("publication_year"), rs.getString("publisher"));
                productList.add(product); 
            }
        } catch (SQLException e) {
            e.printStackTrace(); 
        }
        
        return productList; 
    }
    public List<Product> searchByName(String name) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE name LIKE ?"; 

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, "%" + name + "%"); 
            ResultSet rs = stmt.executeQuery(); 
            
            while (rs.next()) {
                String id = rs.getString("id");
                String productName = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                double inputprice = rs.getDouble("inputprice");
                Product product = new Product(id, productName, price, quantity,inputprice);
                productList.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace(); 
        }
        
        return productList; 
    }
    public List<Book> searchByPublicationYear(int year) {
        List<Book> bookList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE publication_year = ?"; 

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, year); 
            ResultSet rs = stmt.executeQuery();
            
            while (rs.next()) {
                String id = rs.getString("id");
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                double inputprice = rs.getDouble("inputprice");
                String author = rs.getString("author");
                String isbn = rs.getString("isbn");
                int publicationYear = rs.getInt("publication_year");
                String publisher = rs.getString("publisher");
                Book book = new Book(id, name, price, quantity,inputprice, author, isbn, publicationYear, publisher);
                bookList.add(book);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        return bookList; 
    }
    public void insertProductChangeHistory(String productName, double inputPrice, double price, double profit) {
        String sql = "INSERT INTO product_change_history (product_name, input_price, price, profit, type_action) VALUES (?, ?, ?, ?, ?)";
        
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, productName);
            pstmt.setDouble(2, inputPrice);
            pstmt.setDouble(3, price);
            pstmt.setDouble(4, profit);
            pstmt.setString(5, "sell");
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public void updateWorkingHours(String userId, long duration) {
        String query = "UPDATE users SET working_hours = working_hours + ? WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setLong(1, duration);
            pstmt.setString(2, userId);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace(); 
        }
    }
    public void updateProduct(Product product) {
        String sql = "UPDATE products SET name = ?, price = ?, quantity = ?,inputprice = ?, author = ?, isbn = ?, publisher = ?, brand = ?, material = ? WHERE id = ?"; 

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, product.getName()); 
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getQuantity());
            stmt.setDouble(4, product.getInputPrice());

            if (product instanceof Book) {
                Book book = (Book) product;
                stmt.setString(5, book.getAuthor());
                stmt.setString(6, book.getIsbn()); 
                stmt.setString(7, book.getPublisher()); 
                stmt.setNull(8, Types.VARCHAR); 
                stmt.setNull(9, Types.VARCHAR); 
            } else if (product instanceof Toy) {
                Toy toy = (Toy) product;
                stmt.setNull(5, Types.VARCHAR); 
                stmt.setNull(6, Types.VARCHAR); 
                stmt.setNull(7, Types.VARCHAR); 
                stmt.setString(8, toy.getBrand()); 
                stmt.setString(9, toy.getMaterial());
            } else if (product instanceof Stationery) {
                Stationery stationery = (Stationery) product;
                stmt.setNull(5, Types.VARCHAR); 
                stmt.setNull(6, Types.VARCHAR); 
                stmt.setNull(7, Types.VARCHAR);
                stmt.setString(8, stationery.getBrand());
                stmt.setString(9, stationery.getMaterial()); 
            } else {
                stmt.setNull(5, Types.VARCHAR);
                stmt.setNull(6, Types.VARCHAR); 
                stmt.setNull(7, Types.VARCHAR); 
                stmt.setNull(8, Types.VARCHAR);
                stmt.setNull(9, Types.VARCHAR); 
            }
            stmt.setString(10, product.getId());

        } catch (SQLException e) {
            e.printStackTrace(); 
        }
    }
    public int getNextProductId() {
        String sqlMaxId = "SELECT COALESCE(MAX(id), 0) FROM products";
        try (PreparedStatement stmt = connection.prepareStatement(sqlMaxId);
             ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1) + 1; 
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 1; 
    }
    public void updateProductQuantity(String productId, int newQuantity) {
        String sql = "UPDATE products SET quantity = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, newQuantity);
            stmt.setString(2, productId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    
}


