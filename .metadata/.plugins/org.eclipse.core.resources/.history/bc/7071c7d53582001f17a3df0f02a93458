package frame;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel;
    private JButton addButton, editButton, removeButton, backButton;
    private JTextField searchField;
    private JComboBox<String> salaryOptions;
    private ManagerFrame managerFrame;
    private Store store; // Đối tượng Store

    public EmpmanaFrame(ManagerFrame managerFrame) {
        this.managerFrame = managerFrame;
        this.store = new Store(); // Khởi tạo Store để dùng cho kết nối DB

        setTitle("User Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        String[] columnNames = {"ID", "Username", "Password", "Name", "Role", "DOB", "Phone", "ID Card", "Working Hours", "Salary", "Point"};
        tableModel = new DefaultTableModel(columnNames, 0);
        employeeTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        addButton = new JButton("Add User");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addUser());

        editButton = new JButton("Edit User");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editUser());

        removeButton = new JButton("Remove User");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeUser());

        backButton = new JButton("Back");
        actionPanel.add(backButton);
        backButton.addActionListener(e -> back());

        salaryOptions = new JComboBox<>(new String[]{"Show Salary1", "Show Salary2", "Show Salary3"});
        salaryOptions.addActionListener(e -> updateSalaryDisplay());
        actionPanel.add(salaryOptions);

        loadUsersFromDatabase();

        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void loadUsersFromDatabase() {
        try (Connection connection = store.getConnection(); // Sử dụng kết nối từ Store
             Statement statement = connection.createStatement()) {
            String query = "SELECT * FROM users";
            ResultSet resultSet = statement.executeQuery(query);
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String name = resultSet.getString("name");
                String role = resultSet.getString("role");
                String dob = resultSet.getString("dob");
                String phone = resultSet.getString("phone");
                String idCard = resultSet.getString("id_card");
                String workingHours = resultSet.getString("working_hours");
                String salary1 = resultSet.getString("salary1");
                String salary2 = resultSet.getString("salary2");
                String salary3 = resultSet.getString("salary3");
                String point = resultSet.getString("point");

                tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, salary1, point});
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading data from database.");
        }
    }

    private void updateSalaryDisplay() {
        int selectedOption = salaryOptions.getSelectedIndex();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String id = (String) tableModel.getValueAt(i, 0);
            try (Connection connection = store.getConnection(); // Sử dụng kết nối từ Store
                 Statement statement = connection.createStatement()) {
                String query = "SELECT salary1, salary2, salary3 FROM users WHERE id = " + id;
                ResultSet resultSet = statement.executeQuery(query);
                if (resultSet.next()) {
                    String salary = switch (selectedOption) {
                        case 0 -> resultSet.getString("salary1");
                        case 1 -> resultSet.getString("salary2");
                        case 2 -> resultSet.getString("salary3");
                        default -> "";
                    };
                    tableModel.setValueAt(salary, i, 9); // Cập nhật cột lương
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    private void addUser() {
        // Các phần khác giữ nguyên
    }

    private void editUser() {
        // Các phần khác giữ nguyên
    }

    private void removeUser() {
        // Các phần khác giữ nguyên
    }

    private void back() {
        setVisible(false);
        managerFrame.setVisible(true);
    }
}
