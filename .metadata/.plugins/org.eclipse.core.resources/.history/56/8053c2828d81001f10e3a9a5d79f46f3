package frame;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.sql.*;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private DefaultTableModel tableModel; // Mô hình cho bảng
    private JButton addButton, editButton, removeButton;
    private JTextField searchField;
    private JComboBox<String> salaryOptions; // Chọn mức lương
    private String[] salaryColumns = {"Salary1", "Salary2", "Salary3"}; // Các cột lương

    public EmpmanaFrame() {
        setTitle("User Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Tạo mô hình dữ liệu cho bảng
        String[] columnNames = {"ID", "Username", "Password", "Name", "Role", "DOB", "Phone", "ID Card", "Working Hours", "Salary", "Point"};
        tableModel = new DefaultTableModel(columnNames, 0);
        employeeTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        // Tạo panel cho các nút và tìm kiếm
        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        searchField = new JTextField(15);
        actionPanel.add(searchField);

        addButton = new JButton("Add User");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addUser());

        editButton = new JButton("Edit User");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editUser());

        removeButton = new JButton("Remove User");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeUser());

        // Thêm JComboBox cho lương
        salaryOptions = new JComboBox<>(salaryColumns);
        salaryOptions.addActionListener(e -> updateSalaryDisplay());
        actionPanel.add(salaryOptions);

        // Tải dữ liệu từ cơ sở dữ liệu
        loadUsersFromDatabase();

        setSize(800, 600);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void loadUsersFromDatabase() {
        try {
            // Kết nối đến cơ sở dữ liệu
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
            Statement statement = connection.createStatement();
            String query = "SELECT * FROM users";
            ResultSet resultSet = statement.executeQuery(query);
            tableModel.setRowCount(0);

            while (resultSet.next()) {
                String id = resultSet.getString("id");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String name = resultSet.getString("name");
                String role = resultSet.getString("role");
                String dob = resultSet.getString("dob");
                String phone = resultSet.getString("phone");
                String idCard = resultSet.getString("id_card");
                String workingHours = resultSet.getString("working_hours");
                String salary1 = resultSet.getString("salary1");
                String salary2 = resultSet.getString("salary2");
                String salary3 = resultSet.getString("salary3");
                String point = resultSet.getString("point");

                // Mặc định hiển thị Salary1
                String displayedSalary = salary1; 

                tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, displayedSalary, point});
            }

            resultSet.close();
            statement.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading data from database.");
        }
    }

    private void addUser() {
        String sqlMaxId = "SELECT MAX(id) FROM users";
        String id = "1"; // Giá trị mặc định nếu không có người dùng nào

        // Kết nối tới cơ sở dữ liệu
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
            // Lấy ID tiếp theo
            try (PreparedStatement statement = connection.prepareStatement(sqlMaxId);
                 ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    int maxId = resultSet.getInt(1);
                    id = String.valueOf(maxId + 1); // Tăng ID lên 1
                }
            }

            // Nhập thông tin người dùng
            String username = JOptionPane.showInputDialog(this, "Enter Username:");
            String password = JOptionPane.showInputDialog(this, "Enter Password:");
            String name = JOptionPane.showInputDialog(this, "Enter Name:");

            // Tạo JComboBox cho vai trò
            String[] roles = {"Manager", "Customer", "Employee"};
            String role = (String) JOptionPane.showInputDialog(this, "Select Role:", "Role Selection",
                    JOptionPane.QUESTION_MESSAGE, null, roles, roles[0]); // Default to first option

            String dob = JOptionPane.showInputDialog(this, "Enter Date of Birth (YYYY-MM-DD):");
            String phone = JOptionPane.showInputDialog(this, "Enter Phone:");
            String idCard = JOptionPane.showInputDialog(this, "Enter ID Card:"); // Giữ lại dòng này
            String workingHours = JOptionPane.showInputDialog(this, "Enter Working Hours:");
            String salary1 = JOptionPane.showInputDialog(this, "Enter Salary1:");
            String salary2 = JOptionPane.showInputDialog(this, "Enter Salary2:");
            String salary3 = JOptionPane.showInputDialog(this, "Enter Salary3:");
            String point = JOptionPane.showInputDialog(this, "Enter Point:");
            String sqlInsert = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(sqlInsert)) {
                insertStatement.setString(1, id);
                insertStatement.setString(2, username);
                insertStatement.setString(3, password);
                insertStatement.setString(4, name);
                insertStatement.setString(5, role);
                insertStatement.setString(6, dob);
                insertStatement.setString(7, phone);
                insertStatement.setString(8, idCard); // Đảm bảo sử dụng đúng tên cột
                insertStatement.setString(9, workingHours);
                insertStatement.setString(10, salary1);
                insertStatement.setString(11, salary2);
                insertStatement.setString(12, salary3);
                insertStatement.setString(13, point);
                insertStatement.executeUpdate(); // Thực hiện thêm
            }
            // Mặc định hiển thị Salary1
            String displayedSalary = salary1; 
            tableModel.addRow(new Object[]{id, username, password, name, role, dob, phone, idCard, workingHours, displayedSalary, point});
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void removeUser() {
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow != -1) {
            String id = (String) tableModel.getValueAt(selectedRow, 0); // Get the ID of the selected user
            int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove this user?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
                    String sqlDelete = "DELETE FROM users WHERE id = ?";
                    try (PreparedStatement deleteStatement = connection.prepareStatement(sqlDelete)) {
                        deleteStatement.setString(1, id); // Set the ID of the user to be deleted
                        deleteStatement.executeUpdate(); // Execute the delete operation
                    }
                    tableModel.removeRow(selectedRow); // Remove the row from the table
                    JOptionPane.showMessageDialog(this, "User removed successfully.");
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error removing user from database.");
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to remove.");
        }
    }

    private void editUser() {
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow != -1) {
            // Get the user ID to identify the user in the database
            String id = (String) tableModel.getValueAt(selectedRow, 0);

            // Get current values for editing
            String username = (String) tableModel.getValueAt(selectedRow, 1);
            String password = (String) tableModel.getValueAt(selectedRow, 2);
            String name = (String) tableModel.getValueAt(selectedRow, 3);
            String role = (String) tableModel.getValueAt(selectedRow, 4);
            String dob = (String) tableModel.getValueAt(selectedRow, 5);
            String phone = (String) tableModel.getValueAt(selectedRow, 6);
            String idCard = (String) tableModel.getValueAt(selectedRow, 7);
            String workingHours = (String) tableModel.getValueAt(selectedRow, 8);
            String salary1 = (String) tableModel.getValueAt(selectedRow, 9);
            String salary2 = (String) tableModel.getValueAt(selectedRow, 10);
            String salary3 = (String) tableModel.getValueAt(selectedRow, 11);
            String point = (String) tableModel.getValueAt(selectedRow, 12);

            // Hiển thị hộp thoại nhập thông tin
            username = JOptionPane.showInputDialog(this, "Edit Username:", username);
            password = JOptionPane.showInputDialog(this, "Edit Password:", password);
            name = JOptionPane.showInputDialog(this, "Edit Name:", name);
            role = (String) JOptionPane.showInputDialog(this, "Edit Role:", role, JOptionPane.QUESTION_MESSAGE, null, salaryColumns, role); // Default to current role
            dob = JOptionPane.showInputDialog(this, "Edit Date of Birth:", dob);
            phone = JOptionPane.showInputDialog(this, "Edit Phone:", phone);
            idCard = JOptionPane.showInputDialog(this, "Edit ID Card:", idCard);
            workingHours = JOptionPane.showInputDialog(this, "Edit Working Hours:", workingHours);
            salary1 = JOptionPane.showInputDialog(this, "Edit Salary1:", salary1);
            salary2 = JOptionPane.showInputDialog(this, "Edit Salary2:", salary2);
            salary3 = JOptionPane.showInputDialog(this, "Edit Salary3:", salary3);
            point = JOptionPane.showInputDialog(this, "Edit Point:", point);

            // Cập nhật cơ sở dữ liệu
            try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@")) {
                String sqlUpdate = "UPDATE users SET username = ?, password = ?, name = ?, role = ?, dob = ?, phone = ?, id_card = ?, working_hours = ?, salary1 = ?, salary2 = ?, salary3 = ?, point = ? WHERE id = ?";
                try (PreparedStatement updateStatement = connection.prepareStatement(sqlUpdate)) {
                    updateStatement.setString(1, username);
                    updateStatement.setString(2, password);
                    updateStatement.setString(3, name);
                    updateStatement.setString(4, role);
                    updateStatement.setString(5, dob);
                    updateStatement.setString(6, phone);
                    updateStatement.setString(7, idCard);
                    updateStatement.setString(8, workingHours);
                    updateStatement.setString(9, salary1);
                    updateStatement.setString(10, salary2);
                    updateStatement.setString(11, salary3);
                    updateStatement.setString(12, point);
                    updateStatement.setString(13, id);
                    updateStatement.executeUpdate(); // Thực hiện cập nhật
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating user.");
            }

            // Cập nhật bảng
            tableModel.setValueAt(username, selectedRow, 1);
            tableModel.setValueAt(password, selectedRow, 2);
            tableModel.setValueAt(name, selectedRow, 3);
            tableModel.setValueAt(role, selectedRow, 4);
            tableModel.setValueAt(dob, selectedRow, 5);
            tableModel.setValueAt(phone, selectedRow, 6);
            tableModel.setValueAt(idCard, selectedRow, 7);
            tableModel.setValueAt(workingHours, selectedRow, 8);
            tableModel.setValueAt(salary1, selectedRow, 9);
            tableModel.setValueAt(point, selectedRow, 12);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a user to edit.");
        }
    }

    private void updateSalaryDisplay() {
        int selectedIndex = salaryOptions.getSelectedIndex();
        
        // Kiểm tra xem chỉ số có hợp lệ không
        if (selectedIndex < 0 || selectedIndex >= 3) {
            JOptionPane.showMessageDialog(this, "Invalid salary selection.");
            return;
        }

        // Lấy chỉ số cột của cột Salary
        int salaryColumnIndex = 9; // Cột "Salary" là cột thứ 9 (index 8)

        // Cập nhật hiển thị bảng
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            String salaryValue = (String) tableModel.getValueAt(i, salaryColumnIndex + selectedIndex); // Lấy giá trị lương từ cột tương ứng
            tableModel.setValueAt(salaryValue, i, salaryColumnIndex); // Cập nhật giá trị lương trong cột Salary
        }
    }



    public static void main(String[] args) {
        SwingUtilities.invokeLater(EmpmanaFrame::new);
    }
}
