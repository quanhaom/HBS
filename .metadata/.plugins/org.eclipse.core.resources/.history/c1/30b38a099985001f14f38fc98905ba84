package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.swing.JOptionPane;

import services.DatabaseConnection;

public class Employee extends Person {
    private double salary1;
    private double salary2;
    private double salary3;
    private String dob;
    private String phone;
    private String idCard;
    private int workingHours;
    private Connection connection;
    public Employee(String id, String username, String password,String name, String role, String dob, String phone, String idCard, int workingHours,double salary1,double salary2,double salary3,DatabaseConnection dbConnection) {
        super(id, username, password,name, role);
        this.dob = dob;
        this.phone = phone;
        this.idCard = idCard;
        this.workingHours = workingHours;
        this.salary1 = salary1;

            try {
                this.connection = dbConnection.getConnection();
            } catch (SQLException e) {
                e.printStackTrace();
            
        
            	}
        }           

    public String getDob() {
        return dob;
    }

    public void setDob(String dob) {
        this.dob = dob;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getIdCard() {
        return idCard;
    }

    public void setIdCard(String idCard) {
        this.idCard = idCard;
    }

    public int getWorkingHours() {
        return workingHours;
    }

    public void setWorkingHours(int workingHours) {
        this.workingHours = workingHours;
    }
    public double getSalary1() {
    	return salary1;
    }
    public double getSalary2() {
    	return salary2;
    }
    public double getSalary3() {
    	return salary3;
    }
    public void addProduct(Product product) {
        String sqlMaxId = "SELECT MAX(id) FROM products";
        String sqlInsert = "INSERT INTO products (id, name, price, quantity, brand, suitage, material, type, author, isbn, publication_year, publisher) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 

        try {
            int newId = 1; 
            try (PreparedStatement stmtMax = connection.prepareStatement(sqlMaxId);
                 ResultSet rs = stmtMax.executeQuery()) {
                if (rs.next()) {
                    newId = rs.getInt(1) + 1; // Increment max id by 1
                }
            }
            
            try (PreparedStatement stmtInsert = connection.prepareStatement(sqlInsert)) {
                stmtInsert.setInt(1, newId); 
                stmtInsert.setString(2, product.getName());
                stmtInsert.setDouble(3, product.getPrice());
                stmtInsert.setInt(4, product.getQuantity());

                if (product instanceof Toy) {
                    Toy toy = (Toy) product;
                    stmtInsert.setString(5, toy.getBrand()); 
                    stmtInsert.setInt(6, toy.getSuitAge()); 
                    stmtInsert.setString(7, toy.getMaterial()); 
                    stmtInsert.setString(8, "Toy"); 
                    stmtInsert.setNull(9, Types.VARCHAR); 
                    stmtInsert.setNull(10, Types.VARCHAR); 
                    stmtInsert.setNull(11, Types.INTEGER); 
                    stmtInsert.setNull(12, Types.VARCHAR);
                }
                	else if (product instanceof Stationery) {
                    Stationery stationery = (Stationery) product;
                    stmtInsert.setString(5, stationery.getBrand());
                    stmtInsert.setNull(6, Types.INTEGER); 
                    stmtInsert.setString(7, stationery.getMaterial());
                    stmtInsert.setString(8,"Stationery"); 
                    stmtInsert.setNull(9, Types.VARCHAR); 
                    stmtInsert.setNull(10, Types.VARCHAR); 
                    stmtInsert.setNull(11, Types.INTEGER); 
                    stmtInsert.setNull(12, Types.VARCHAR); 
                } else if (product instanceof Book) {
                    Book book = (Book) product;
                    stmtInsert.setNull(5, Types.VARCHAR); 
                    stmtInsert.setNull(6, Types.INTEGER); 
                    stmtInsert.setNull(7, Types.VARCHAR); 
                    stmtInsert.setString(8, "Book"); 
                    stmtInsert.setString(9, book.getAuthor());
                    stmtInsert.setString(10, book.getIsbn());
                    stmtInsert.setInt(11, book.getPublicationYear());
                    stmtInsert.setString(12, book.getPublisher());
                }

                stmtInsert.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void editProduct() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to edit.");
            return;
        }

        String id = (String) tableModel.getValueAt(selectedRow, 0);

        Product existingProduct = store.getProductById(id);
        if (existingProduct == null) {
            JOptionPane.showMessageDialog(this, "Product not found.");
            return;
        }

        String newName = JOptionPane.showInputDialog(this, "Enter new Product Name:", existingProduct.getName());
        String newPriceStr = JOptionPane.showInputDialog(this, "Enter new Product Price:", existingProduct.getPrice());
        String newQuantityStr = JOptionPane.showInputDialog(this, "Enter new Quantity:", existingProduct.getQuantity());

        if (newName != null && newPriceStr != null && newQuantityStr != null) {
            try {
                double newPrice = Double.parseDouble(newPriceStr);
                int newQuantity = Integer.parseInt(newQuantityStr);

                existingProduct.setName(newName);
                existingProduct.setPrice(newPrice);
                existingProduct.setQuantity(newQuantity);

                if (existingProduct instanceof Book) {
                    Book book = (Book) existingProduct;
                    String newAuthor = JOptionPane.showInputDialog(this, "Enter new Author:", book.getAuthor());
                    String newIsbn = JOptionPane.showInputDialog(this, "Enter new ISBN:", book.getIsbn());
                    String newPublisher = JOptionPane.showInputDialog(this, "Enter new Publisher:", book.getPublisher());

                    if (newAuthor != null && newIsbn != null && newPublisher != null) {
                        book.setAuthor(newAuthor);
                        book.setIsbn(newIsbn);
                        book.setPublisher(newPublisher);
                    }
                } else if (existingProduct instanceof Toy) {
                    Toy toy = (Toy) existingProduct;
                    String newBrand = JOptionPane.showInputDialog(this, "Enter new Brand:", toy.getBrand());
                    String newMaterial = JOptionPane.showInputDialog(this, "Enter new Material:", toy.getMaterial());

                    if (newBrand != null && newMaterial != null) {
                        toy.setBrand(newBrand);
                        toy.setMaterial(newMaterial);
                    }
                } else if (existingProduct instanceof Stationery) {
                    Stationery stationery = (Stationery) existingProduct;
                    String newBrand = JOptionPane.showInputDialog(this, "Enter new Brand:", stationery.getBrand());
                    String newMaterial = JOptionPane.showInputDialog(this, "Enter new Material:", stationery.getMaterial());

                    if (newBrand != null && newMaterial != null) {
                        stationery.setBrand(newBrand);
                        stationery.setMaterial(newMaterial);
                    }
                }

                store.updateProduct(existingProduct);
                loadProducts();
                JOptionPane.showMessageDialog(this, "Product updated successfully.");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input for price or quantity.");
            }
        }
    }

    private void removeProduct() {
        int selectedRow = productTable.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to remove.");
            return;
        }

        String id = (String) tableModel.getValueAt(selectedRow, 0);
        String name = (String) tableModel.getValueAt(selectedRow, 1);

        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to remove " + name + "?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            store.removeProduct(id);
            loadProducts();
            JOptionPane.showMessageDialog(this, name + " removed successfully.");
        }
    }


    @Override
    public String toString() {
        return "Employee [ID=" + getId() + ", Name=" + getName() + ", Role=" + getRole() + 
               ", DOB=" + dob + ", Phone=" + phone + 
               ", ID Card=" + idCard + ", Working Hours=" + workingHours + "]";
    }
}
