package frame;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import model.Book;
import model.Employee;
import model.Product;
import model.Stationery;
import model.Toy;
import services.Store;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;

public class EmployeeFrame extends BaseFrame {

    private LoginFrame loginFrame;
    private JLabel greetingLabel;
    private String Name;
    private String userId;
    private LocalDateTime loginTime;
    private LocalDateTime logoutTime;
    private Employee employee;
    private DefaultTableModel tableModel;
    private JTable productTable;

    public EmployeeFrame(Store store, LoginFrame loginFrame, String userId, String Name) {
        super(store);
        this.loginFrame = loginFrame;
        this.userId = userId;
        this.Name = Name;
        this.loginTime = LocalDateTime.now();
        System.out.print(loginTime);
        setTitle("Employee Frame");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Initialize table and model
        tableModel = new DefaultTableModel(new Object[]{"ID", "Name", "Price", "Quantity", "Input Price"}, 0);
        productTable = new JTable(tableModel);
        loadProducts(); // Populate the table initially

        JPanel greetingPanel = new JPanel();
        if (Name != null) {
            greetingLabel = new JLabel("Hello, " + Name);
            greetingPanel.add(greetingLabel);
            greetingLabel.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    showGreetingOptions();
                }
            });
        }

        JPanel buttonPanel = new JPanel();
        JButton addProductButton = new JButton("Add Product");
        JButton editProductButton = new JButton("Edit Product");
        JButton removeProductButton = new JButton("Remove Product");

        buttonPanel.add(addProductButton);
        buttonPanel.add(editProductButton);
        buttonPanel.add(removeProductButton);

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(greetingPanel, BorderLayout.NORTH);
        mainPanel.add(buttonPanel, BorderLayout.SOUTH);
        mainPanel.add(new JScrollPane(productTable), BorderLayout.CENTER); // Add productTable to mainPanel

        add(mainPanel, BorderLayout.CENTER);

        addProductButton.addActionListener(e -> addProduct());
        editProductButton.addActionListener(e -> editProduct());
        removeProductButton.addActionListener(e -> removeProduct());
    }

    private void addProduct() {
        String[] types = {"Book", "Toy", "Stationery"};
        String type = (String) JOptionPane.showInputDialog(this, "Select Product Type:", "Product Selection",
                JOptionPane.QUESTION_MESSAGE, null, types, types[0]);

        String name = JOptionPane.showInputDialog(this, "Enter Product Name:");
        String priceStr = JOptionPane.showInputDialog(this, "Enter Product Price:");
        String quantityStr = JOptionPane.showInputDialog(this, "Enter Quantity:");
        String inputpriceStr = JOptionPane.showInputDialog(this, "Enter Input Price:");

        if (name != null && priceStr != null && quantityStr != null && type != null) {
            try {
                double price = Double.parseDouble(priceStr);
                int quantity = Integer.parseInt(quantityStr);
                double inputprice = Double.parseDouble(inputpriceStr);
                Product product = null;

                int id = store.getNextProductId();

                switch (type) {
                    case "Book":
                        String author = JOptionPane.showInputDialog(this, "Enter Author:");
                        String publisher = JOptionPane.showInputDialog(this, "Enter Publisher:");
                        String isbn = JOptionPane.showInputDialog(this, "Enter ISBN:");
                        int publicationYear = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Publication Year:"));
                        product = new Book(String.valueOf(id), name, price, quantity, inputprice, author, isbn, publicationYear, publisher);
                        break;
                    case "Toy":
                        String brand = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String material = JOptionPane.showInputDialog(this, "Enter Material:");
                        int suitage = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter Suitable Age:"));
                        product = new Toy(String.valueOf(id), name, price, quantity, inputprice, brand, suitage, material);
                        break;
                    case "Stationery":
                        String brandsta = JOptionPane.showInputDialog(this, "Enter Brand:");
                        String materialsta = JOptionPane.showInputDialog(this, "Enter Material:");
                        product = new Stationery(String.valueOf(id), name, price, quantity, inputprice, brandsta, materialsta);
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Invalid product type.");
                        return;
                }

                employee.addProduct(product);
                loadProducts();
                JOptionPane.showMessageDialog(this, "Product added successfully.");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid input for price or quantity.");
            }
        }
    }

    private void loadProducts() {
        // Clear existing rows
        tableModel.setRowCount(0);
        
        // Load products from store
        for (Product product : store.getAllProducts()) {
            // Add a new row with inputprice
            tableModel.addRow(new Object[]{
                product.getId(),
                product.getName(),
                product.getPrice(),
                product.getQuantity(),
                product.getInputPrice() // Assuming getInputPrice() method exists
            });
        }
    }

    private void logout() {
        logoutTime = LocalDateTime.now();
        System.out.print("Logout Time: " + logoutTime);
        long durationInMinutes = ChronoUnit.MINUTES.between(loginTime, logoutTime);
        double durationInHours = durationInMinutes;
        System.out.print("Duration in hours: " + durationInHours);
        long durationToUpdate = Math.round(durationInHours);
        store.updateWorkingHours(userId, durationToUpdate);
        setVisible(false);
        loginFrame.setVisible(true);
    }
    private void showGreetingOptions() {
        String[] options = {"Log out", "Edit Profile"};
        int choice = JOptionPane.showOptionDialog(this, "Choose an option:", "Options",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        if (choice == 0) {
            logout();
        } else if (choice == 1) {
            openEditProfile();
        }
    }

    public void openEditProfile() {
        new EditPro5(userId);
    }
}
