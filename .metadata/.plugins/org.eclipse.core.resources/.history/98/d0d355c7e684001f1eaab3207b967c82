package model;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

public class Product {
    private String id;
    private String name;
    private double price;
    private int quantity;
    private Connection connection;

    public Product(String id, String name, double price, int quantity) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setId(String id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
    public void addProduct(Product product) {
        String sqlMaxId = "SELECT MAX(id) FROM products";
        String sqlInsert = "INSERT INTO products (id, name, price, quantity, brand, suitage, material, type, author, isbn, publication_year, publisher) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"; 

        try {
            int newId = 1; 
            try (PreparedStatement stmtMax = connection.prepareStatement(sqlMaxId);
                 ResultSet rs = stmtMax.executeQuery()) {
                if (rs.next()) {
                    newId = rs.getInt(1) + 1; // Increment max id by 1
                }
            }
            
            try (PreparedStatement stmtInsert = connection.prepareStatement(sqlInsert)) {
                stmtInsert.setInt(1, newId); 
                stmtInsert.setString(2, product.getName());
                stmtInsert.setDouble(3, product.getPrice());
                stmtInsert.setInt(4, product.getQuantity());

                if (product instanceof Toy) {
                    Toy toy = (Toy) product;
                    stmtInsert.setString(5, toy.getBrand()); 
                    stmtInsert.setInt(6, toy.getSuitAge()); 
                    stmtInsert.setString(7, toy.getMaterial()); 
                    stmtInsert.setString(8, "Toy"); 
                    stmtInsert.setNull(9, Types.VARCHAR); 
                    stmtInsert.setNull(10, Types.VARCHAR); 
                    stmtInsert.setNull(11, Types.INTEGER); 
                    stmtInsert.setNull(12, Types.VARCHAR);
                }
                	else if (product instanceof Stationery) {
                    Stationery stationery = (Stationery) product;
                    stmtInsert.setString(5, stationery.getBrand());
                    stmtInsert.setNull(6, Types.INTEGER); 
                    stmtInsert.setString(7, stationery.getMaterial());
                    stmtInsert.setString(8,"Stationery"); 
                    stmtInsert.setNull(9, Types.VARCHAR); 
                    stmtInsert.setNull(10, Types.VARCHAR); 
                    stmtInsert.setNull(11, Types.INTEGER); 
                    stmtInsert.setNull(12, Types.VARCHAR); 
                } else if (product instanceof Book) {
                    Book book = (Book) product;
                    stmtInsert.setNull(5, Types.VARCHAR); 
                    stmtInsert.setNull(6, Types.INTEGER); 
                    stmtInsert.setNull(7, Types.VARCHAR); 
                    stmtInsert.setString(8, "Book"); 
                    stmtInsert.setString(9, book.getAuthor());
                    stmtInsert.setString(10, book.getIsbn());
                    stmtInsert.setInt(11, book.getPublicationYear());
                    stmtInsert.setString(12, book.getPublisher());
                }

                stmtInsert.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
