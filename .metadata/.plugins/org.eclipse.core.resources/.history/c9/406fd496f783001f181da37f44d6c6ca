package model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class Person {
    private String id;         // corresponds to id (int) in the database
    private String username;   // corresponds to username (varchar)
    private String password;   // corresponds to password (varchar)
    private String name;       // corresponds to name (varchar)
    private String role;       // corresponds to role (varchar)
    private String dob;        // corresponds to dob (date)
    private String phone;      // corresponds to phone (varchar)
    private String idCard;     // corresponds to id_card (varchar)

    // Employee-specific fields
    private Integer workingHours; // corresponds to working_hours (int)
    private Double salary1;        // corresponds to salary1 (decimal)
    private Double salary2;        // corresponds to salary2 (decimal)
    private Double salary3;        // corresponds to salary3 (decimal)

    // Customer-specific fields
    private Integer point;         // corresponds to point (int)

    // Constructor for Employee
    public Person(String id, String username, String password, String name, String role, 
                  String dob, String phone, String idCard, Integer workingHours, 
                  Double salary1, Double salary2, Double salary3) {
        this(id, username, password, name, role, dob, phone, idCard, workingHours, salary1, salary2, salary3, null);
    }

    // Constructor for Customer
    public Person(String id, String username, String password, String name, String role, 
                  String dob, String phone, String idCard, Integer point) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.name = name;
        this.role = role;
        this.dob = dob;
        this.phone = phone;
        this.idCard = idCard;
        this.workingHours = null; // Not applicable for customers
        this.salary1 = null;      // Not applicable for customers
        this.salary2 = null;      // Not applicable for customers
        this.salary3 = null;      // Not applicable for customers
        this.point = point;
    }

    // Getters and Setters
    public String getId() {
        return id;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public String getName() {
        return name;
    }

    public String getRole() {
        return role;
    }

    public String getDob() {
        return dob;
    }

    public String getPhone() {
        return phone;
    }

    public String getIdCard() {
        return idCard;
    }

    public Integer getWorkingHours() {
        return workingHours;
    }

    public Double getSalary1() {
        return salary1;
    }

    public Double getSalary2() {
        return salary2;
    }

    public Double getSalary3() {
        return salary3;
    }

    public Integer getPoint() {
        return point;
    }

    public void addUser(Connection connection) {
        String sql = "INSERT INTO users (id, username, password, name, role, dob, phone, id_card, working_hours, salary1, salary2, salary3, point) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, this.id);
            stmt.setString(2, this.username);
            stmt.setString(3, this.password);
            stmt.setString(4, this.name);
            stmt.setString(5, this.role);
            stmt.setString(6, this.dob);
            stmt.setString(7, this.phone);
            stmt.setString(8, this.idCard);
            stmt.setObject(9, this.workingHours); // Nullable field
            stmt.setObject(10, this.salary1);      // Nullable field
            stmt.setObject(11, this.salary2);      // Nullable field
            stmt.setObject(12, this.salary3);      // Nullable field
            stmt.setObject(13, this.point);        // Nullable field
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String toString() {
        return "Person{" +
                "id='" + id + '\'' +
                ", username='" + username + '\'' +
                ", name='" + name + '\'' +
                ", role='" + role + '\'' +
                ", dob='" + dob + '\'' +
                ", phone='" + phone + '\'' +
                ", idCard='" + idCard + '\'' +
                ", workingHours=" + workingHours +
                ", salary1=" + salary1 +
                ", salary2=" + salary2 +
                ", salary3=" + salary3 +
                ", point=" + point +
                '}';
    }
}
