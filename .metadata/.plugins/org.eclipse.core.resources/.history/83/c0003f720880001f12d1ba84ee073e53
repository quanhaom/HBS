import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

public class EmpmanaFrame extends JFrame {
    private JTable employeeTable;
    private EmployeeTableModel tableModel; // Model cho bảng nhân viên
    private JButton addButton, editButton, removeButton;
    private JTextField searchField;
    private JComboBox<String> sortOptions;
    private List<Employee> employees; // Danh sách nhân viên

    // Lớp Employee
    public static class Employee {
        private int userId;
        private String name;
        private String dob;
        private String phone;
        private String idCard;
        private int workingHours;

        public Employee(int userId, String name, String dob, String phone, String idCard, int workingHours) {
            this.userId = userId;
            this.name = name;
            this.dob = dob;
            this.phone = phone;
            this.idCard = idCard;
            this.workingHours = workingHours;
        }

        // Getters và Setters
        public int getUserId() {
            return userId;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDob() {
            return dob;
        }

        public void setDob(String dob) {
            this.dob = dob;
        }

        public String getPhone() {
            return phone;
        }

        public void setPhone(String phone) {
            this.phone = phone;
        }

        public String getIdCard() {
            return idCard;
        }

        public void setIdCard(String idCard) {
            this.idCard = idCard;
        }

        public int getWorkingHours() {
            return workingHours;
        }

        public void setWorkingHours(int workingHours) {
            this.workingHours = workingHours;
        }
    }

    // Lớp EmployeeTableModel
    public class EmployeeTableModel extends AbstractTableModel {
        private List<Employee> employees;
        private String[] columnNames = {"User ID", "Name", "DOB", "Phone", "ID Card", "Working Hours"};

        public EmployeeTableModel(List<Employee> employees) {
            this.employees = employees;
        }

        @Override
        public int getRowCount() {
            return employees.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Employee employee = employees.get(rowIndex);
            switch (columnIndex) {
                case 0: return employee.getUserId();
                case 1: return employee.getName();
                case 2: return employee.getDob();
                case 3: return employee.getPhone();
                case 4: return employee.getIdCard();
                case 5: return employee.getWorkingHours();
                default: return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        public void setEmployees(List<Employee> employees) {
            this.employees = employees;
            fireTableDataChanged(); // Cập nhật bảng
        }
    }

    public EmpmanaFrame() {
        setTitle("Employee Management");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Khởi tạo danh sách nhân viên
        employees = new ArrayList<>();
        tableModel = new EmployeeTableModel(employees);
        employeeTable = new JTable(tableModel); // Sử dụng EmployeeTableModel
        JScrollPane scrollPane = new JScrollPane(employeeTable);
        add(scrollPane, BorderLayout.CENTER);

        // Tạo panel cho các nút và tìm kiếm
        JPanel actionPanel = new JPanel();
        add(actionPanel, BorderLayout.SOUTH);

        searchField = new JTextField(15);
        actionPanel.add(searchField);

        addButton = new JButton("Add Employee");
        actionPanel.add(addButton);
        addButton.addActionListener(e -> addEmployee());

        editButton = new JButton("Edit Employee");
        actionPanel.add(editButton);
        editButton.addActionListener(e -> editEmployee());

        removeButton = new JButton("Remove Employee");
        actionPanel.add(removeButton);
        removeButton.addActionListener(e -> removeEmployee());

        // Thêm tùy chọn sắp xếp
        sortOptions = new JComboBox<>(new String[]{"Sort by Name", "Sort by ID"});
        sortOptions.addActionListener(e -> updateSortedEmployeeDisplay());
        actionPanel.add(sortOptions);

        setSize(600, 400);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void addEmployee() {
        // Cài đặt chức năng để thêm nhân viên
        String name = JOptionPane.showInputDialog("Enter Name:");
        String dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):");
        String phone = JOptionPane.showInputDialog("Enter Phone:");
        String idCard = JOptionPane.showInputDialog("Enter ID Card:");
        int workingHours = Integer.parseInt(JOptionPane.showInputDialog("Enter Working Hours:"));
        
        // Tạo đối tượng Employee mới
        Employee newEmployee = new Employee(employees.size() + 1, name, dob, phone, idCard, workingHours);
        employees.add(newEmployee);
        tableModel.setEmployees(employees); // Cập nhật bảng
    }

    private void editEmployee() {
        // Cài đặt chức năng để chỉnh sửa thông tin nhân viên
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow >= 0) {
            Employee employee = employees.get(selectedRow);
            String name = JOptionPane.showInputDialog("Enter Name:", employee.getName());
            String dob = JOptionPane.showInputDialog("Enter Date of Birth (YYYY-MM-DD):", employee.getDob());
            String phone = JOptionPane.showInputDialog("Enter Phone:", employee.getPhone());
            String idCard = JOptionPane.showInputDialog("Enter ID Card:", employee.getIdCard());
            int workingHours = Integer.parseInt(JOptionPane.showInputDialog("Enter Working Hours:", employee.getWorkingHours()));
            
            // Cập nhật thông tin nhân viên
            employee.setName(name);
            employee.setDob(dob);
            employee.setPhone(phone);
            employee.setIdCard(idCard);
            employee.setWorkingHours(workingHours);
            tableModel.setEmployees(employees); // Cập nhật bảng
        } else {
            JOptionPane.showMessageDialog(this, "Please select an employee to edit.");
        }
    }

    private void removeEmployee() {
        // Cài đặt chức năng để xóa nhân viên
        int selectedRow = employeeTable.getSelectedRow();
        if (selectedRow >= 0) {
            employees.remove(selectedRow);
            tableModel.setEmployees(employees); // Cập nhật bảng
        } else {
            JOptionPane.showMessageDialog(this, "Please select an employee to remove.");
        }
    }

    private void updateSortedEmployeeDisplay() {
        // Cài đặt chức năng để sắp xếp hiển thị nhân viên
        // Bạn có thể thực hiện sắp xếp trên danh sách `employees` tại đây
        // Ví dụ:
        String sortOption = (String) sortOptions.getSelectedItem();
        if ("Sort by Name".equals(sortOption)) {
            employees.sort((e1, e2) -> e1.getName().compareTo(e2.getName()));
        } else if ("Sort by ID".equals(sortOption)) {
            employees.sort((e1, e2) -> Integer.compare(e1.getUserId(), e2.getUserId()));
        }
        tableModel.setEmployees(employees); // Cập nhật bảng sau khi sắp xếp
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(EmpmanaFrame::new);
    }
}
