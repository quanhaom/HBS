package services;

import java.sql.Types;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import model.Book;
import model.Toy;
import model.Stationery;
import model.Person;
import model.Product;

public class Store {
    private Connection connection;

    public Store() {
        try {
            // Connect to the MySQL database
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@"); // Update with your credentials
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // User Management
    public void addUser(Employee employee) {
        String sql = "INSERT INTO users (username, password, name, dob, phone, id_card, working_hours) VALUES (?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, employee.getId()); // Assuming id is used as username
            stmt.setString(2, employee.getPassword());
            stmt.setString(3, employee.getName());
            stmt.setDate(4, Date.valueOf(Employee).getDob())); // Assuming dob is of type LocalDate
            stmt.setString(5, person.getPhone());
            stmt.setString(6, person.getIdCard());
            stmt.setInt(7, person.getWorkingHours());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Person> getUsers() {
        List<Person> users = new ArrayList<>();
        String sql = "SELECT * FROM users";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                Person person = new Person(
                    rs.getString("username"),
                    rs.getString("name"),
                    rs.getString("password"),
                    null // role can be set to null or handled separately
                );
                // Add additional fields from database
                person.setDob(rs.getDate("dob").toLocalDate());
                person.setPhone(rs.getString("phone"));
                person.setIdCard(rs.getString("id_card"));
                person.setWorkingHours(rs.getInt("working_hours"));
                users.add(person);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return users;
    }

    // Product Management
    public void addProduct(Product product) {
        String sqlMaxId = "SELECT COALESCE(MAX(id), 0) FROM products"; // Use COALESCE to avoid null if no products exist
        String sqlInsert = "INSERT INTO products (id, name, price, quantity, brand, suitage, material, type, author, isbn, publication_year, publisher) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try {
            // Step 1: Get the maximum id
            int newId = 1; // Default value in case there are no products
            try (PreparedStatement stmtMax = connection.prepareStatement(sqlMaxId);
                 ResultSet rs = stmtMax.executeQuery()) {
                if (rs.next()) {
                    newId = rs.getInt(1) + 1; // Increment max id by 1
                }
            }

            // Step 2: Insert the new product with the calculated id
            try (PreparedStatement stmtInsert = connection.prepareStatement(sqlInsert)) {
                stmtInsert.setInt(1, newId); // Set the new id
                stmtInsert.setString(2, product.getName());
                stmtInsert.setDouble(3, product.getPrice());
                stmtInsert.setInt(4, product.getQuantity());

                // Handle subclasses with additional attributes
                if (product instanceof Toy) {
                    Toy toy = (Toy) product;
                    stmtInsert.setString(5, toy.getBrand());
                    stmtInsert.setInt(6, toy.getSuitAge());
                    stmtInsert.setString(7, toy.getMaterial());
                    stmtInsert.setString(8, "Toy");
                    stmtInsert.setNull(9, Types.VARCHAR); // Author not applicable
                    stmtInsert.setNull(10, Types.VARCHAR); // ISBN not applicable
                    stmtInsert.setNull(11, Types.INTEGER); // Publication year not applicable
                    stmtInsert.setNull(12, Types.VARCHAR); // Publisher not applicable
                } else if (product instanceof Stationery) {
                    Stationery stationery = (Stationery) product;
                    stmtInsert.setString(5, stationery.getBrand());
                    stmtInsert.setNull(6, Types.INTEGER); // Suitage not applicable
                    stmtInsert.setString(7, stationery.getMaterial());
                    stmtInsert.setString(8, "Stationery");
                    stmtInsert.setNull(9, Types.VARCHAR); // Author not applicable
                    stmtInsert.setNull(10, Types.VARCHAR); // ISBN not applicable
                    stmtInsert.setNull(11, Types.INTEGER); // Publication year not applicable
                    stmtInsert.setNull(12, Types.VARCHAR); // Publisher not applicable
                } else if (product instanceof Book) {
                    Book book = (Book) product;
                    stmtInsert.setNull(5, Types.VARCHAR); // Brand not applicable
                    stmtInsert.setNull(6, Types.INTEGER); // Suitage not applicable
                    stmtInsert.setNull(7, Types.VARCHAR); // Material not applicable
                    stmtInsert.setString(8, "Book");
                    stmtInsert.setString(9, book.getAuthor());
                    stmtInsert.setString(10, book.getIsbn());
                    stmtInsert.setInt(11, book.getPublicationYear());
                    stmtInsert.setString(12, book.getPublisher());
                }

                stmtInsert.executeUpdate();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Product> getProducts() {
        List<Product> products = new ArrayList<>();
        String sql = "SELECT * FROM products";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                String type = rs.getString("type");
                Product product;

                switch (type) {
                    case "Toy":
                        product = new Toy(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("brand"),
                            rs.getInt("suitage"),
                            rs.getString("material")
                        );
                        break;
                    case "Stationery":
                        product = new Stationery(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("brand"),
                            rs.getString("material")
                        );
                        break;
                    case "Book":
                        product = new Book(
                            rs.getString("id"),
                            rs.getString("name"),
                            rs.getDouble("price"),
                            rs.getInt("quantity"),
                            rs.getString("author"),
                            rs.getString("isbn"),
                            rs.getInt("publication_year"),
                            rs.getString("publisher")
                        );
                        break;
                    default:
                        continue; // Handle unexpected types
                }
                products.add(product);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return products;
    }

    public Product getProductById(String productId) {
        Product product = null;
        String sql = "SELECT * FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String type = rs.getString("type");
                    switch (type) {
                        case "Toy":
                            product = new Toy(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("brand"),
                                rs.getInt("suitage"),
                                rs.getString("material")
                            );
                            break;
                        case "Stationery":
                            product = new Stationery(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("brand"),
                                rs.getString("material")
                            );
                            break;
                        case "Book":
                            product = new Book(
                                rs.getString("id"),
                                rs.getString("name"),
                                rs.getDouble("price"),
                                rs.getInt("quantity"),
                                rs.getString("author"),
                                rs.getString("isbn"),
                                rs.getInt("publication_year"),
                                rs.getString("publisher")
                            );
                            break;
                        default:
                            break; // Handle unexpected types
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return product;
    }

    public void removeProduct(String productId) {
        String sql = "DELETE FROM products WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, productId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Product> searchByAuthor(String author) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE author = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, author);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Product product = createProductFromResultSet(rs);
                    productList.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return productList;
    }

    public List<Product> searchByName(String name) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE name LIKE ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, "%" + name + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Product product = createProductFromResultSet(rs);
                    productList.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return productList;
    }

    public List<Product> searchByPublicationYear(int year) {
        List<Product> productList = new ArrayList<>();
        String sql = "SELECT * FROM products WHERE publication_year = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, year);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Product product = createProductFromResultSet(rs);
                    productList.add(product);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return productList;
    }

    // Utility method to create Product from ResultSet
    private Product createProductFromResultSet(ResultSet rs) throws SQLException {
        String type = rs.getString("type");
        switch (type) {
            case "Toy":
                return new Toy(
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("quantity"),
                    rs.getString("brand"),
                    rs.getInt("suitage"),
                    rs.getString("material")
                );
            case "Stationery":
                return new Stationery(
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("quantity"),
                    rs.getString("brand"),
                    rs.getString("material")
                );
            case "Book":
                return new Book(
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("quantity"),
                    rs.getString("author"),
                    rs.getString("isbn"),
                    rs.getInt("publication_year"),
                    rs.getString("publisher")
                );
            default:
                return null; // Handle unexpected types
        }
    }

    public void updateProduct(Product product) {
        String sql = "UPDATE products SET name = ?, price = ?, quantity = ?, brand = ?, suitage = ?, material = ?, author = ?, isbn = ?, publication_year = ?, publisher = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, product.getName());
            stmt.setDouble(2, product.getPrice());
            stmt.setInt(3, product.getQuantity());

            // Handle subclasses with additional attributes
            if (product instanceof Toy) {
                Toy toy = (Toy) product;
                stmt.setString(4, toy.getBrand());
                stmt.setInt(5, toy.getSuitAge());
                stmt.setString(6, toy.getMaterial());
                stmt.setNull(7, Types.VARCHAR); // Author not applicable
                stmt.setNull(8, Types.VARCHAR); // ISBN not applicable
                stmt.setNull(9, Types.INTEGER); // Publication year not applicable
                stmt.setNull(10, Types.VARCHAR); // Publisher not applicable
            } else if (product instanceof Stationery) {
                Stationery stationery = (Stationery) product;
                stmt.setString(4, stationery.getBrand());
                stmt.setNull(5, Types.INTEGER); // Suitage not applicable
                stmt.setString(6, stationery.getMaterial());
                stmt.setNull(7, Types.VARCHAR); // Author not applicable
                stmt.setNull(8, Types.VARCHAR); // ISBN not applicable
                stmt.setNull(9, Types.INTEGER); // Publication year not applicable
                stmt.setNull(10, Types.VARCHAR); // Publisher not applicable
            } else if (product instanceof Book) {
                Book book = (Book) product;
                stmt.setNull(4, Types.VARCHAR); // Brand not applicable
                stmt.setNull(5, Types.INTEGER); // Suitage not applicable
                stmt.setNull(6, Types.VARCHAR); // Material not applicable
                stmt.setString(7, book.getAuthor());
                stmt.setString(8, book.getIsbn());
                stmt.setInt(9, book.getPublicationYear());
                stmt.setString(10, book.getPublisher());
            }

            stmt.setString(11, product.getId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
