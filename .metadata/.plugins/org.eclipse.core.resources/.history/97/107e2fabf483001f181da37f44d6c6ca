package frame;

import model.Person;

import javax.swing.*;
import java.awt.*;
import java.sql.*;

public class EditPro extends JFrame {
    private JTextField idField, usernameField, passwordField, nameField, dobField, phoneField, idCardField, pointField;
    private JLabel roleLabel;
    private JButton applyButton, cancelButton;
    private CustomerFrame customerFrame;
    private String userId; // To store the user ID for the database update
    
    public EditPro(CustomerFrame customerFrame, String userId) {
        this.customerFrame = customerFrame;
        this.userId = userId;
        
        setTitle("Edit Profile");
        setLayout(new GridLayout(10, 2));
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        // Labels and fields for user information
        add(new JLabel("ID:"));
        idField = new JTextField();
        idField.setEditable(false); // ID should not be editable
        add(idField);
        
        add(new JLabel("Username:"));
        usernameField = new JTextField();
        add(usernameField);
        
        add(new JLabel("Password:"));
        passwordField = new JTextField();
        add(passwordField);
        
        add(new JLabel("Name:"));
        nameField = new JTextField();
        add(nameField);
        
        add(new JLabel("Role:"));
        roleLabel = new JLabel("Customer"); // Fixed as "customer"
        add(roleLabel);
        
        add(new JLabel("DOB (YYYY-MM-DD):"));
        dobField = new JTextField();
        add(dobField);
        
        add(new JLabel("Phone:"));
        phoneField = new JTextField();
        add(phoneField);
        
        add(new JLabel("ID Card:"));
        idCardField = new JTextField();
        add(idCardField);
        
        add(new JLabel("Points:"));
        pointField = new JTextField();
        add(pointField);
        
        // Buttons to apply changes or cancel
        applyButton = new JButton("Apply");
        applyButton.addActionListener(e -> applyChanges());
        add(applyButton);
        
        cancelButton = new JButton("Cancel");
        cancelButton.addActionListener(e -> cancel());
        add(cancelButton);
        
        // Load user information
        loadUserInfo();
        
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    private void loadUserInfo() {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement statement = connection.prepareStatement("SELECT * FROM users WHERE id = ?")) {
            statement.setString(1, userId);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                idField.setText(resultSet.getString("id"));
                usernameField.setText(resultSet.getString("username"));
                passwordField.setText(resultSet.getString("password"));
                nameField.setText(resultSet.getString("name"));
                dobField.setText(resultSet.getString("dob"));
                phoneField.setText(resultSet.getString("phone"));
                idCardField.setText(resultSet.getString("id_card"));
                pointField.setText(resultSet.getString("point"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error loading user information.");
        }
    }
    
    private void applyChanges() {
        String username = usernameField.getText();
        String password = passwordField.getText();
        String name = nameField.getText();
        String dob = dobField.getText();
        String phone = phoneField.getText();
        String idCard = idCardField.getText();
        String point = pointField.getText();
        
        // Validate fields
        if (username.isEmpty() || password.isEmpty() || name.isEmpty() || dob.isEmpty() || phone.isEmpty() || idCard.isEmpty() || point.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Update the database with the new information
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/hbs_db", "root", "iuhuyenlemleM0@");
             PreparedStatement statement = connection.prepareStatement("UPDATE users SET username=?, password=?, name=?, dob=?, phone=?, id_card=?, point=? WHERE id=?")) {
            statement.setString(1, username);
            statement.setString(2, password);
            statement.setString(3, name);
            statement.setString(4, dob);
            statement.setString(5, phone);
            statement.setString(6, idCard);
            statement.setString(7, point);
            statement.setString(8, userId);
            statement.executeUpdate();
            
            JOptionPane.showMessageDialog(this, "Profile updated successfully.");
            dispose();
            customerFrame.setVisible(true); // Return to the customer frame
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating profile.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void cancel() {
        dispose();
        customerFrame.setVisible(true);
    }
}
